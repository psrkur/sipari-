// Environment variables - Manuel y√ºkleme
require('dotenv').config({ path: require('path').join(__dirname, '.env') });
const isProduction = process.env.NODE_ENV === 'production';
console.log('üîß process.env.PORT ba≈ülangƒ±√ß:', process.env.PORT);
console.log('üîß NODE_ENV:', process.env.NODE_ENV);
console.log('üîß isProduction:', isProduction);
// SABƒ∞T PORT - Development i√ßin 3001, Production i√ßin process.env.PORT
const SERVER_PORT = isProduction ? (process.env.PORT || 10000) : 3001;
console.log('üîß SERVER_PORT:', SERVER_PORT);
console.log('üîß process.env.PORT son:', process.env.PORT);
const DATABASE_URL = 'postgresql://naim:cibKjxXirpnFyQTor7DpBhGXf1XAqmmw@dpg-d1podn2dbo4c73bp2q7g-a.oregon-postgres.render.com/siparis?sslmode=require&connect_timeout=30';
const isPostgreSQL = DATABASE_URL.startsWith('postgresql://') || DATABASE_URL.startsWith('postgres://');
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production';
const FRONTEND_URL = isProduction ? 'https://siparisnet.netlify.app' : (process.env.FRONTEND_URL || 'http://localhost:3000');

const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const compression = require('compression');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const cloudinary = require('cloudinary').v2;
const { CloudinaryStorage } = require('multer-storage-cloudinary');
const logger = require('./utils/logger');
const { configureSocket } = require('./socket-config');
const performanceMonitor = require('./performance-monitor');
const chatbotRouter = require('./chatbot-api');
const aiChatbotRouter = require('./ai-chatbot-api');
const dashboardRouter = require('./dashboard-api');
const backupRouter = require('./backup-api');

// Email servisini import et
const { sendOrderNotification, sendAdminNotification } = require('./utils/email-service');

// Otomatik temizlik mod√ºl√ºn√º import et
const { startAutoCleanup, cleanupOldOrders, showDatabaseStats } = require('./cleanup-old-orders');

// Cloudinary konfig√ºrasyonu
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || 'your-cloud-name',
  api_key: process.env.CLOUDINARY_API_KEY || 'your-api-key',
  api_secret: process.env.CLOUDINARY_API_SECRET || 'your-api-secret'
});
// ƒ∞kinci dotenv y√ºklemesi kaldƒ±rƒ±ldƒ±

const { PrismaClient } = require('@prisma/client');

// Prisma client configuration - En basit hali
const prisma = new PrismaClient();

// Global prisma instance'ƒ±nƒ± export et
global.prisma = prisma;

console.log('üîß Prisma client olu≈üturuldu');

// Prisma baƒülantƒ±sƒ±nƒ± test et
prisma.$connect()
  .then(() => {
    console.log('‚úÖ Prisma client ba≈üarƒ±yla baƒülandƒ±');
  })
  .catch((error) => {
    console.error('‚ùå Prisma client baƒülantƒ± hatasƒ±:', error);
  });

// Prisma client'ƒ± global olarak tanƒ±mla
global.prismaClient = prisma;

// Firma y√∂netimi mod√ºl√ºn√º import et
// const companyManagement = require('./company-management');

// Sadece hata durumlarƒ±nda log - gereksiz query logging kaldƒ±rƒ±ldƒ±
prisma.$on('error', (e) => {
  logger.error('Prisma Error: ' + e.message);
});

if (!process.env.DATABASE_URL) {
  process.env.DATABASE_URL = 'file:./dev.db';
}

// PostgreSQL URL override for Render
if (process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL.includes('postgresql')) {
  process.env.DATABASE_URL = 'postgresql://naim:cibKjxXirpnFyQTor7DpBhGXf1XAqmmw@dpg-d1podn2dbo4c73bp2q7g-a.oregon-postgres.render.com/siparis';
  console.log('üîß PostgreSQL URL override applied for production');
}

// Database type detection
console.log(`üîç Database URL: ${DATABASE_URL.substring(0, 50)}...`);
console.log(`üìä Database Type: ${isPostgreSQL ? 'PostgreSQL' : 'SQLite'}`);
console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîó Full DATABASE_URL: ${DATABASE_URL}`);

async function testDatabaseConnection() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±lƒ±');
  } catch (error) {
    console.error('‚ùå Veritabanƒ± baƒülantƒ± hatasƒ±:', error);
    return false;
  }
}

testDatabaseConnection();

// Migration kontrol√º - ge√ßici olarak devre dƒ±≈üƒ±
async function checkAndRunMigration() {
  try {
    console.log('üîß Migration kontrol√º atlanƒ±yor (ge√ßici olarak devre dƒ±≈üƒ±)...');
    
    // imagePath s√ºtununun var olup olmadƒ±ƒüƒ±nƒ± kontrol et
    const result = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'products' AND column_name = 'imagePath'
    `;
    
    console.log('üìä imagePath s√ºtunu kontrol√º:', result);
    
    if (result.length > 0) {
      console.log('‚úÖ imagePath s√ºtunu mevcut');
    } else {
      console.log('‚ùå imagePath s√ºtunu eksik, manuel olarak ekleniyor...');
      // Manuel olarak s√ºtun ekle
      await prisma.$executeRaw`ALTER TABLE "products" ADD COLUMN IF NOT EXISTS "imagePath" TEXT`;
      console.log('‚úÖ imagePath s√ºtunu manuel olarak eklendi');
    }
    
  } catch (error) {
    console.error('‚ùå Migration hatasƒ±:', error);
    try {
      // Hata durumunda manuel olarak s√ºtun eklemeyi dene
      await prisma.$executeRaw`ALTER TABLE "products" ADD COLUMN IF NOT EXISTS "imagePath" TEXT`;
      console.log('‚úÖ imagePath s√ºtunu manuel olarak eklendi');
    } catch (manualError) {
      console.error('‚ùå Manuel s√ºtun ekleme hatasƒ±:', manualError);
    }
  }
}

// Server ba≈ülamadan √∂nce migration'ƒ± √ßalƒ±≈ütƒ±r
checkAndRunMigration();
    

const QRCode = require('qrcode');

// Placeholder SVG helper function
const getPlaceholderSvg = () => {
  return `<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
    <rect width="400" height="300" fill="#f3f4f6"/>
    <rect x="50" y="50" width="300" height="200" fill="#e5e7eb" stroke="#d1d5db" stroke-width="2"/>
    <circle cx="200" cy="150" r="40" fill="#9ca3af"/>
    <path d="M180 130 L220 150 L180 170 Z" fill="#6b7280"/>
    <text x="200" y="220" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="#6b7280">Resim Yok</text>
  </svg>`;
};

const app = express();

// Multer konfig√ºrasyonu - Dosya tabanlƒ±
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads', 'products');
    // Klas√∂r yoksa olu≈ütur
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // Orijinal dosya adƒ±nƒ± koru, sadece T√ºrk√ße karakterleri ve bo≈üluklarƒ± d√ºzelt
    const originalName = file.originalname;
    const safeName = originalName
      .replace(/[ƒü]/g, 'g')
      .replace(/[√º]/g, 'u')
      .replace(/[≈ü]/g, 's')
      .replace(/[ƒ±]/g, 'i')
      .replace(/[√∂]/g, 'o')
      .replace(/[√ß]/g, 'c')
      .replace(/[ƒû]/g, 'G')
      .replace(/[√ú]/g, 'U')
      .replace(/[≈û]/g, 'S')
      .replace(/[ƒ∞]/g, 'I')
      .replace(/[√ñ]/g, 'O')
      .replace(/[√á]/g, 'C')
      .replace(/\s+/g, '_')
      .replace(/[^a-zA-Z0-9._-]/g, '');
    
    // Eƒüer aynƒ± isimde dosya varsa, sonuna sayƒ± ekle
    let finalName = safeName;
    let counter = 1;
    const uploadDir = path.join(__dirname, 'uploads', 'products');
    
    while (fs.existsSync(path.join(uploadDir, finalName))) {
      const nameWithoutExt = safeName.substring(0, safeName.lastIndexOf('.'));
      const ext = safeName.substring(safeName.lastIndexOf('.'));
      finalName = `${nameWithoutExt}_${counter}${ext}`;
      counter++;
    }
    
    cb(null, finalName);
  }
});

const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB limit
  },
  fileFilter: function (req, file, cb) {
    // Sadece resim dosyalarƒ±nƒ± kabul et
    if (file.mimetype && file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Sadece resim dosyalarƒ± y√ºklenebilir!'), false);
    }
  }
});


// PORT deƒüi≈ükeni kaldƒ±rƒ±ldƒ±, SERVER_PORT kullanƒ±lƒ±yor

// Render/proxy ortamƒ± i√ßin ger√ßek IP ve rate limit desteƒüi
app.set('trust proxy', 1);

// G√ºvenlik middleware'leri - Development i√ßin CSP devre dƒ±≈üƒ±
if (process.env.NODE_ENV === 'production') {
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        scriptSrc: ["'self'"],
        imgSrc: ["'self'", "data:", "https:", "http://localhost:3001", "https://yemek5-backend.onrender.com", "https://arsut.net.tr"],
      },
    },
    crossOriginEmbedderPolicy: false
  }));
} else {
  // Development i√ßin sadece temel g√ºvenlik
  app.use(helmet({
    crossOriginEmbedderPolicy: false
  }));
}

// Compression middleware
app.use(compression());

// Rate limiting - Ge√ßici olarak devre dƒ±≈üƒ±
// const limiter = rateLimit({
//   windowMs: 15 * 60 * 1000, // 15 dakika
//   max: 100, // IP ba≈üƒ±na 100 istek
//   message: {
//     error: '√áok fazla istek g√∂nderildi. L√ºtfen 15 dakika sonra tekrar deneyin.'
//   },
//   standardHeaders: true,
//   legacyHeaders: false,
// });

// app.use('/api/', limiter);

// CORS konfig√ºrasyonu - Test i√ßin t√ºm origin'lere izin ver
app.use(cors({
  origin: true, // T√ºm origin'lere izin ver (test i√ßin)
  credentials: false,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin'],
  exposedHeaders: ['Content-Disposition', 'Content-Length', 'Content-Type']
}));

// Global CORS headers for all responses
app.use((req, res, next) => {
  // Origin kontrol√º
  const allowedOrigins = ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'http://localhost:3003', 'http://localhost:3004', 'http://localhost:8080', 'https://yemek5-frontend.onrender.com', 'https://yemek5.vercel.app', 'https://arsut.net.tr', 'https://siparisnet.netlify.app'];
  const origin = req.headers.origin;
  
  if (allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin);
  } else {
    res.header('Access-Control-Allow-Origin', '*');
  }
  
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, HEAD');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.header('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.header('Access-Control-Max-Age', '86400');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use('/uploads', (req, res, next) => {
  // T√ºm origin'lere izin ver
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, OPTIONS, HEAD');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length');
  res.set('Access-Control-Max-Age', '86400'); // 24 saat cache
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
}, express.static(path.join(__dirname, 'uploads')));

// Eski resim endpoint'i kaldƒ±rƒ±ldƒ± - Base64 endpoint kullanƒ±lƒ±yor

// Products klas√∂r√º i√ßin √∂zel CORS ayarlarƒ±
app.use('/uploads/products', (req, res, next) => {
  // T√ºm origin'lere izin ver
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, OPTIONS, HEAD');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length');
  res.set('Access-Control-Max-Age', '86400'); // 24 saat cache
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
}, express.static(path.join(__dirname, 'uploads', 'products')));

// Resim endpoint'i - Doƒürudan resim dosyasƒ± d√∂nd√ºr
app.get('/api/images/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(__dirname, 'uploads', 'products', filename);
  
  console.log('üñºÔ∏è /api/images/ √ßaƒürƒ±ldƒ±:', filename);
  
  // Development i√ßin en permissive CORS ayarlarƒ±
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, OPTIONS, HEAD');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.set('Access-Control-Max-Age', '86400'); // 24 saat cache
  res.set('Access-Control-Allow-Credentials', 'false');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    // Dosya var mƒ± kontrol et
    if (!fs.existsSync(filePath)) {
      console.error('Resim dosyasƒ± bulunamadƒ±:', filePath);
      return res.status(404).json({ error: 'Resim bulunamadƒ±' });
    }
    
    // Dosya boyutunu kontrol et (5MB limit)
    const stats = fs.statSync(filePath);
    if (stats.size > 5 * 1024 * 1024) {
      console.error('Dosya √ßok b√ºy√ºk:', filename, stats.size);
      return res.status(413).json({ error: 'Dosya √ßok b√ºy√ºk (max 5MB)' });
    }
    
    // Dosya uzantƒ±sƒ±na g√∂re MIME type belirle
    const ext = path.extname(filename).toLowerCase();
    let mimeType = 'image/png'; // Varsayƒ±lan
    if (ext === '.jpg' || ext === '.jpeg') mimeType = 'image/jpeg';
    else if (ext === '.gif') mimeType = 'image/gif';
    else if (ext === '.webp') mimeType = 'image/webp';
    
    // Response header'larƒ±nƒ± set et
    res.set('Content-Type', mimeType);
    res.set('Cache-Control', 'public, max-age=3600'); // 1 saat cache
    
    // Dosyayƒ± doƒürudan stream et
    res.sendFile(filePath);
    
  } catch (error) {
    console.error('Resim dosyasƒ± g√∂nderilemedi:', filename, error);
    
    // Header'lar zaten set edilmi≈üse hata d√∂nd√ºrme
    if (!res.headersSent) {
      res.status(500).json({ error: 'Resim i≈ülenemedi' });
    }
  }
});

// Eski resim endpoint'i kaldƒ±rƒ±ldƒ± - Base64 endpoint kullanƒ±lƒ±yor

const authenticateToken = (req, res, next) => {
  // WebSocket baƒülantƒ±larƒ± i√ßin token kontrol√º yapma
  if (req.url?.includes('/socket.io/')) {
    return next();
  }
  
  // Log seviyesini azalt - sadece hata durumlarƒ±nda log
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    console.log('‚ùå Token yok - API isteƒüi:', req.url);
    return res.status(401).json({ error: 'Token gerekli' });
  }
  
  jwt.verify(token, process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production', (err, user) => {
    if (err) {
      console.log('‚ùå Token hatasƒ±:', err.message);
      return res.status(403).json({ error: 'Ge√ßersiz token' });
    }
    // Sadece debug modunda user bilgisini logla
    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ Token ge√ßerli, user:', user);
    }
    req.user = user;
    next();
  });
};



app.post('/api/auth/register', async (req, res) => {
  // CORS ayarlarƒ±
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.set('Access-Control-Max-Age', '86400');
  res.set('Access-Control-Allow-Credentials', 'false');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    const { email, password, name, phone, address } = req.body;
    
    const existingUser = await prisma.user.findUnique({
      where: { email }
    });

    if (existingUser) {
      return res.status(400).json({ error: 'Bu email zaten kayƒ±tlƒ±' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        name,
        phone,
        address,
        role: 'CUSTOMER',
        isActive: false // Y√∂netici onayƒ±na kadar pasif
      }
    });

    res.json({ 
      message: 'Kayƒ±t ba≈üarƒ±lƒ±, y√∂netici onayƒ±ndan sonra giri≈ü yapabilirsiniz.'
    });
  } catch (error) {
    res.status(500).json({ error: 'Kayƒ±t hatasƒ±' });
  }
});

app.post('/api/auth/login', async (req, res) => {
  // CORS ayarlarƒ±
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.set('Access-Control-Max-Age', '86400');
  res.set('Access-Control-Allow-Credentials', 'false');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    console.log('üîç Login isteƒüi:', req.body);
    const { email, password } = req.body;
    
    const user = await prisma.user.findFirst({
      where: { email }
    });

    console.log('üîç Kullanƒ±cƒ± bulundu:', user ? 'Evet' : 'Hayƒ±r');

    if (!user) {
      console.log('‚ùå Kullanƒ±cƒ± bulunamadƒ±');
      return res.status(400).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    console.log('üîç Kullanƒ±cƒ± durumu:', { isActive: user.isActive, isApproved: user.isApproved });

    if (!user.isActive) {
      console.log('‚ùå Kullanƒ±cƒ± aktif deƒüil');
      return res.status(403).json({ error: 'Hesabƒ±nƒ±z hen√ºz y√∂netici tarafƒ±ndan onaylanmadƒ±.' });
    }

    const validPassword = await bcrypt.compare(password, user.password);
    console.log('üîç ≈ûifre kontrol√º:', validPassword ? 'Ge√ßerli' : 'Ge√ßersiz');

    if (!validPassword) {
      console.log('‚ùå Ge√ßersiz ≈üifre');
      return res.status(400).json({ error: 'Ge√ßersiz ≈üifre' });
    }

    const token = jwt.sign(
      { userId: user.id, email: user.email, role: user.role, branchId: user.branchId },
      process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production',
      { expiresIn: '24h' }
    );

    console.log('‚úÖ Giri≈ü ba≈üarƒ±lƒ±');
    res.json({ token, user: { id: user.id, email: user.email, name: user.name, role: user.role, branchId: user.branchId } });
  } catch (error) {
    console.error('‚ùå Login hatasƒ±:', error);
    res.status(500).json({ error: 'Giri≈ü hatasƒ±' });
  }
});

// ≈ûifre sƒ±fƒ±rlama talebi endpoint'i
app.post('/api/auth/forgot-password', async (req, res) => {
  // CORS ayarlarƒ±
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.set('Access-Control-Max-Age', '86400');
  res.set('Access-Control-Allow-Credentials', 'false');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email adresi gerekli' });
    }

    // Kullanƒ±cƒ±yƒ± bul
    const user = await prisma.user.findUnique({
      where: { email }
    });

    if (!user) {
      // G√ºvenlik i√ßin kullanƒ±cƒ± bulunamasa da aynƒ± mesajƒ± d√∂nd√ºr
      return res.json({ message: '≈ûifre sƒ±fƒ±rlama linki email adresinize g√∂nderildi' });
    }

    // Reset token olu≈ütur (1 saat ge√ßerli)
    const resetToken = require('crypto').randomBytes(32).toString('hex');
    const resetTokenExpiry = new Date(Date.now() + 60 * 60 * 1000); // 1 saat

    // Kullanƒ±cƒ±yƒ± g√ºncelle
    await prisma.user.update({
      where: { id: user.id },
      data: {
        resetToken,
        resetTokenExpiry
      }
    });

    // Reset link olu≈ütur
    const resetLink = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;

    // Email g√∂nder
    const emailService = require('./utils/email-service');
    const emailResult = await emailService.sendPasswordResetEmail(email, resetLink, user.name);

    if (emailResult.success) {
      console.log('‚úÖ ≈ûifre sƒ±fƒ±rlama emaili g√∂nderildi:', email);
      res.json({ message: '≈ûifre sƒ±fƒ±rlama linki email adresinize g√∂nderildi' });
    } else {
      console.error('‚ùå Email g√∂nderme hatasƒ±:', emailResult.error);
      res.status(500).json({ error: 'Email g√∂nderilemedi' });
    }

  } catch (error) {
    console.error('‚ùå ≈ûifre sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: '≈ûifre sƒ±fƒ±rlama i≈ülemi ba≈üarƒ±sƒ±z' });
  }
});

// ≈ûifre sƒ±fƒ±rlama endpoint'i
app.post('/api/auth/reset-password', async (req, res) => {
  // CORS ayarlarƒ±
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
  res.set('Access-Control-Max-Age', '86400');
  res.set('Access-Control-Allow-Credentials', 'false');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    const { token, newPassword } = req.body;
    
    if (!token || !newPassword) {
      return res.status(400).json({ error: 'Token ve yeni ≈üifre gerekli' });
    }

    // Kullanƒ±cƒ±yƒ± token ile bul
    const user = await prisma.user.findFirst({
      where: {
        resetToken: token,
        resetTokenExpiry: {
          gt: new Date()
        }
      }
    });

    if (!user) {
      return res.status(400).json({ error: 'Ge√ßersiz veya s√ºresi dolmu≈ü token' });
    }

    // Yeni ≈üifreyi hash'le
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // Kullanƒ±cƒ±yƒ± g√ºncelle
    await prisma.user.update({
      where: { id: user.id },
      data: {
        password: hashedPassword,
        resetToken: null,
        resetTokenExpiry: null
      }
    });

    console.log('‚úÖ ≈ûifre ba≈üarƒ±yla sƒ±fƒ±rlandƒ±:', user.email);
    res.json({ message: '≈ûifreniz ba≈üarƒ±yla sƒ±fƒ±rlandƒ±' });

  } catch (error) {
    console.error('‚ùå ≈ûifre sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: '≈ûifre sƒ±fƒ±rlama i≈ülemi ba≈üarƒ±sƒ±z' });
  }
});

app.get('/api/branches', async (req, res) => {
  try {
    const branches = await prisma.branch.findMany({
      where: { isActive: true }
    });
    res.json(branches);
  } catch (error) {
    res.status(500).json({ error: '≈ûubeler getirilemedi' });
  }
});

// Admin ≈üubeler endpoint'i
app.get('/api/admin/branches', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const branches = await prisma.branch.findMany({
      orderBy: { name: 'asc' }
    });
    res.json(branches);
  } catch (error) {
    res.status(500).json({ error: '≈ûubeler getirilemedi' });
  }
});

// ≈ûube y√∂netimi endpoint'leri
app.post('/api/branches', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { name, address, phone, companyId } = req.body;

    if (!name || !address || !phone || !companyId) {
      return res.status(400).json({ error: 'T√ºm alanlar (isim, adres, telefon, ≈üirket) zorunludur.' });
    }

    const branch = await prisma.branch.create({
      data: {
        name,
        address,
        phone,
        isActive: true,
        companyId: Number(companyId)
      }
    });

    res.json(branch);
  } catch (error) {
    console.error('≈ûube olu≈üturulamadƒ±:', error);
    res.status(500).json({ error: '≈ûube olu≈üturulamadƒ±', detail: error.message });
  }
});

app.put('/api/admin/branches/:id', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;
    const { name, address, phone, isActive } = req.body;

    const branch = await prisma.branch.update({
      where: { id: parseInt(id) },
      data: {
        name,
        address,
        phone,
        isActive
      }
    });

    res.json(branch);
  } catch (error) {
    res.status(500).json({ error: '≈ûube g√ºncellenemedi' });
  }
});

// ≈ûubeyi pasif hale getirme endpoint'i
app.patch('/api/admin/branches/:id/deactivate', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;

    // ≈ûubeyi pasif hale getir
    await prisma.branch.update({
      where: { id: parseInt(id) },
      data: { isActive: false }
    });

    res.json({ message: '≈ûube ba≈üarƒ±yla pasif hale getirildi' });
  } catch (error) {
    console.error('‚ùå ≈ûube pasif hale getirilemedi:', error);
    res.status(500).json({ error: '≈ûube pasif hale getirilemedi' });
  }
});

app.delete('/api/admin/branches/:id', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;

    // ≈ûubeye baƒülƒ± sipari≈üler var mƒ± kontrol et
    const ordersCount = await prisma.order.count({
      where: { branchId: parseInt(id) }
    });

    if (ordersCount > 0) {
      return res.status(400).json({ error: 'Bu ≈üubeye ait sipari≈üler bulunduƒüu i√ßin silinemez' });
    }

    // ≈ûubeye baƒülƒ± √ºr√ºnler var mƒ± kontrol et
    const productsCount = await prisma.product.count({
      where: { branchId: parseInt(id) }
    });

    if (productsCount > 0) {
      return res.status(400).json({ error: 'Bu ≈üubeye ait √ºr√ºnler bulunduƒüu i√ßin silinemez' });
    }

    // ≈ûubeye baƒülƒ± kullanƒ±cƒ±lar var mƒ± kontrol et
    const usersCount = await prisma.user.count({
      where: { branchId: parseInt(id) }
    });

    if (usersCount > 0) {
      return res.status(400).json({ error: 'Bu ≈üubeye ait kullanƒ±cƒ±lar bulunduƒüu i√ßin silinemez' });
    }

    await prisma.branch.delete({
      where: { id: parseInt(id) }
    });

    res.json({ message: '≈ûube ba≈üarƒ±yla silindi' });
  } catch (error) {
    res.status(500).json({ error: '≈ûube silinemedi' });
  }
});

app.get('/api/products/:branchId', async (req, res) => {
  try {
    const { branchId } = req.params;
    
    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const products = await prisma.product.findMany({
      where: {
        branchId: parseInt(branchId),
        isActive: true
      },
      select: {
        id: true,
        name: true,
        description: true,
        price: true,
        image: true,
        imagePath: true,
        isActive: true,
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: [
        {
          category: {
            name: 'asc'
          }
        },
        {
          name: 'asc'
        }
      ]
    });
    
    res.json(products);
  } catch (error) {
    console.error('‚ùå √úr√ºnler getirilemedi:', error);
    res.status(500).json({ error: '√úr√ºnler getirilemedi' });
  }
});

app.post('/api/orders', authenticateToken, async (req, res) => {
  try {
    const { branchId, items, customerInfo, deliveryType, paymentMethod, notes } = req.body;
    
    let customer = null;
    if (customerInfo) {
      customer = await prisma.customer.upsert({
        where: { phone: customerInfo.phone },
        update: {
          name: customerInfo.name,
          email: customerInfo.email,
          address: customerInfo.address
        },
        create: {
          name: customerInfo.name,
          phone: customerInfo.phone,
          email: customerInfo.email,
          address: customerInfo.address
        }
      });
    }

    const totalAmount = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const orderNumber = `ORD-${Date.now()}`;
    const deliveryFee = deliveryType === 'delivery' ? 5.0 : 0.0;
    const finalTotal = totalAmount + deliveryFee;

    const paymentText = paymentMethod ? 
      (paymentMethod === 'cash' ? 'Nakit' : 
       paymentMethod === 'card' ? 'Kart (Kapƒ±da)' : 
       paymentMethod === 'online' ? 'Online √ñdeme' : 'Belirtilmemi≈ü') : '';
    
    const order = await prisma.order.create({
      data: {
        orderNumber,
        totalAmount: finalTotal,
        status: 'PENDING',
        branchId: parseInt(branchId),
        customerId: customer?.id,
        userId: req.user.userId,
        orderType: 'DELIVERY', // Sipari≈ü tipini belirt
        notes: `${deliveryType === 'delivery' ? 'Adrese Teslim' : '≈ûubeden Al'} - √ñdeme: ${paymentText} - ${notes || ''}`
      }
    });

    for (const item of items) {
      await prisma.orderItem.create({
        data: {
          quantity: item.quantity,
          price: item.price,
          orderId: order.id,
          productId: item.productId,
          note: item.note || null // √úr√ºn notunu kaydet
        }
      });
    }

    // Ger√ßek zamanlƒ± bildirim g√∂nder
    if (io) {
      io.emit('newOrder', {
        orderId: order.id,
        orderNumber: order.orderNumber,
        branchId: order.branchId,
        status: order.status,
        totalAmount: order.totalAmount,
        createdAt: order.createdAt
      });
    }

    // Email bildirimleri g√∂nder (asenkron olarak) - POS satƒ±≈ülarƒ± hari√ß
    try {
      // POS satƒ±≈üƒ± kontrol√º - "Kasa Satƒ±≈üƒ±" notu varsa mail g√∂nderme
      const isPOSSale = order.notes && order.notes.includes('Kasa Satƒ±≈üƒ±');
      
      if (!isPOSSale) {
        // ≈ûube bilgilerini al
        const branch = await prisma.branch.findUnique({
          where: { id: parseInt(branchId) }
        });

        // M√º≈üteriye email g√∂nder
        if (customer?.email) {
          const orderWithItems = await prisma.order.findUnique({
            where: { id: order.id },
            include: {
              orderItems: {
                include: {
                  product: true
                }
              }
            }
          });
          
          sendOrderNotification(orderWithItems, customer, branch);
        }

        // Admin'e email bildirimi g√∂nder
        sendAdminNotification(order, customer, branch);
      } else {
        console.log('üìß POS satƒ±≈üƒ± tespit edildi - Email bildirimi g√∂nderilmedi');
      }
      
    } catch (emailError) {
      console.error('‚ùå Email g√∂nderme hatasƒ±:', emailError);
      // Email hatasƒ± sipari≈ü olu≈üturmayƒ± etkilemesin
    }

    res.json({ order, message: 'Sipari≈ü ba≈üarƒ±yla olu≈üturuldu' });
  } catch (error) {
    console.error('Sipari≈ü olu≈üturma hatasƒ±:', error); // <-- Hata detayƒ±nƒ± logla
    res.status(500).json({ error: 'Sipari≈ü olu≈üturulamadƒ±' });
  }
});

// Email test endpoint'i
app.post('/api/test-email', async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email adresi gerekli' });
    }

    const testOrder = {
      orderNumber: 'TEST-123',
      totalAmount: 50.0,
      createdAt: new Date(),
      orderType: 'DELIVERY',
      notes: 'Test sipari≈üi'
    };

    const testCustomer = {
      name: 'Test M√º≈üteri',
      phone: '0555 123 45 67',
      email: email
    };

    const testBranch = {
      name: 'Test ≈ûube'
    };

    const result = await sendOrderNotification(testOrder, testCustomer, testBranch);
    
    if (result.success) {
      res.json({ message: 'Test email ba≈üarƒ±yla g√∂nderildi', messageId: result.messageId });
    } else {
      res.status(500).json({ error: 'Email g√∂nderilemedi', details: result.error });
    }
    
  } catch (error) {
    console.error('Test email hatasƒ±:', error);
    res.status(500).json({ error: 'Test email hatasƒ±' });
  }
});

// QR Men√º endpoint'leri
app.get('/api/qr-menu/:branchId', async (req, res) => {
  try {
    const { branchId } = req.params;
    
    // ≈ûube bilgilerini al
    const branch = await prisma.branch.findUnique({
      where: { id: parseInt(branchId) },
      select: {
        id: true,
        name: true,
        address: true,
        phone: true,
        isActive: true
      }
    });

    if (!branch || !branch.isActive) {
      return res.status(404).json({ error: '≈ûube bulunamadƒ± veya aktif deƒüil' });
    }

    // ≈ûubenin √ºr√ºnlerini al
    const products = await prisma.product.findMany({
      where: {
        branchId: parseInt(branchId),
        isActive: true
      },
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: [
        {
          category: {
            name: 'asc'
          }
        },
        {
          name: 'asc'
        }
      ]
    });

    // Kategorilere g√∂re grupla
    const menuByCategory = {};
    products.forEach(product => {
      const categoryName = product.category?.name || 'Diƒüer';
      if (!menuByCategory[categoryName]) {
        menuByCategory[categoryName] = [];
      }
      menuByCategory[categoryName].push({
        id: product.id,
        name: product.name,
        description: product.description,
        price: product.price,
        image: product.image,
        isActive: product.isActive
      });
    });

    res.json({
      branch: {
        id: branch.id,
        name: branch.name,
        address: branch.address,
        phone: branch.phone
      },
      menu: menuByCategory,
      lastUpdated: new Date().toISOString()
    });
  } catch (error) {
    console.error('QR Men√º hatasƒ±:', error);
    res.status(500).json({ error: 'Men√º bilgileri getirilemedi' });
  }
});

// QR kod olu≈üturma endpoint'i
app.post('/api/admin/qr-codes/generate', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { branchId } = req.body;

    if (!branchId) {
      return res.status(400).json({ error: '≈ûube ID gerekli' });
    }

    // ≈ûube kontrol√º
    const branch = await prisma.branch.findUnique({
      where: { id: parseInt(branchId) }
    });

    if (!branch) {
      return res.status(404).json({ error: '≈ûube bulunamadƒ±' });
    }

    // QR kod URL'si olu≈ütur
    const qrUrl = `${FRONTEND_URL}/qr-menu/${branchId}`;
    
    // QR kod olu≈ütur
    const qrCodeDataUrl = await QRCode.toDataURL(qrUrl, {
      width: 300,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    res.json({
      branchId: branch.id,
      branchName: branch.name,
      qrUrl: qrUrl,
      qrCodeDataUrl: qrCodeDataUrl,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('QR kod olu≈üturma hatasƒ±:', error);
    res.status(500).json({ error: 'QR kod olu≈üturulamadƒ±' });
  }
});

// T√ºm ≈üubeler i√ßin QR kod olu≈üturma
app.get('/api/admin/qr-codes/all', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const branches = await prisma.branch.findMany({
      where: { isActive: true },
      select: {
        id: true,
        name: true,
        address: true
      }
    });

    const qrCodes = [];

    for (const branch of branches) {
      const qrUrl = `${FRONTEND_URL}/qr-menu/${branch.id}`;
      const qrCodeDataUrl = await QRCode.toDataURL(qrUrl, {
        width: 300,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });

      qrCodes.push({
        branchId: branch.id,
        branchName: branch.name,
        branchAddress: branch.address,
        qrUrl: qrUrl,
        qrCodeDataUrl: qrCodeDataUrl,
        generatedAt: new Date().toISOString()
      });
    }

    res.json(qrCodes);
  } catch (error) {
    console.error('QR kodlar olu≈üturma hatasƒ±:', error);
    res.status(500).json({ error: 'QR kodlar olu≈üturulamadƒ±' });
  }
});

// M√º≈üteri sipari≈ülerini getir (sadece giri≈ü yapmƒ±≈ü kullanƒ±cƒ±lar i√ßin)
app.get('/api/customer/orders', authenticateToken, async (req, res) => {
  try {
    let whereClause = {
      orderType: { not: 'TABLE' } // Masa sipari≈ülerini hari√ß tut
    };

    // CUSTOMER rol√ºndeki kullanƒ±cƒ±lar sadece kendi sipari≈ülerini g√∂rebilir
    if (req.user.role === 'CUSTOMER') {
      whereClause.userId = req.user.userId;
    } else if (req.user.role === 'SUPER_ADMIN' || req.user.role === 'BRANCH_MANAGER') {
      // Admin kullanƒ±cƒ±lar t√ºm m√º≈üteri sipari≈ülerini g√∂rebilir
    } else {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const orders = await prisma.order.findMany({
      where: whereClause,
      select: {
        id: true,
        orderNumber: true,
        totalAmount: true,
        status: true,
        createdAt: true,
        updatedAt: true,
        notes: true,
        orderType: true,
        branch: {
          select: {
            id: true,
            name: true
          }
        },
        user: req.user.role !== 'CUSTOMER' ? {
          select: {
            id: true,
            name: true,
            email: true,
            phone: true
          }
        } : false,
        orderItems: {
          select: {
            id: true,
            quantity: true,
            price: true,
            note: true,
            product: {
              select: {
                id: true,
                name: true,
                price: true
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    res.json(orders);
  } catch (error) {
    console.error('‚ùå M√º≈üteri sipari≈üleri getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈üler getirilemedi' });
  }
});

// M√º≈üteri sipari≈ü detayƒ±nƒ± getir
app.get('/api/customer/orders/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    let whereClause = {
      id: parseInt(id),
      orderType: { not: 'TABLE' } // Masa sipari≈ülerini hari√ß tut
    };

    // CUSTOMER rol√ºndeki kullanƒ±cƒ±lar sadece kendi sipari≈ülerini g√∂rebilir
    if (req.user.role === 'CUSTOMER') {
      whereClause.userId = req.user.userId;
    } else if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const order = await prisma.order.findFirst({
      where: whereClause,
      include: {
        branch: true,
        user: req.user.role !== 'CUSTOMER', // Admin kullanƒ±cƒ±lar i√ßin m√º≈üteri bilgilerini de getir
        orderItems: {
          include: {
            product: true
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({ error: 'Sipari≈ü bulunamadƒ±' });
    }

    res.json(order);
  } catch (error) {
    console.error('M√º≈üteri sipari≈ü detayƒ± getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈ü detayƒ± getirilemedi' });
  }
});

// Genel sipari≈ü detayƒ±nƒ± getir (masa sipari≈üleri dahil)
app.get('/api/orders/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const order = await prisma.order.findUnique({
      where: { id: parseInt(id) },
      include: {
        branch: true,
        table: {
          include: {
            branch: true
          }
        },
        orderItems: {
          include: {
            product: true
          }
        }
      }
    });

    if (!order) {
      return res.status(404).json({ error: 'Sipari≈ü bulunamadƒ±' });
    }

    res.json(order);
  } catch (error) {
    console.error('Sipari≈ü detayƒ± getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈ü detayƒ± getirilemedi' });
  }
});

app.get('/api/admin/orders', authenticateToken, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      select: { 
        id: true,
        role: true,
        branchId: true
      }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    let whereClause = {
      orderType: { 
        notIn: ['COLLECTION'] // Sadece COLLECTION deƒüerini hari√ß tut
      }
    };
    
    // branchId parametresi varsa filtrele
    if (req.query.branchId) {
      whereClause.branchId = parseInt(req.query.branchId);
    } else if (user.role === 'BRANCH_MANAGER') {
      whereClause.branchId = user.branchId;
    } else if (user.role === 'SUPER_ADMIN') {
      // S√ºper admin t√ºm sipari≈üleri getir (tahsilat hari√ß)
    }

    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const orders = await prisma.order.findMany({
      where: whereClause,
      select: {
        id: true,
        orderNumber: true,
        totalAmount: true,
        status: true,
        createdAt: true,
        updatedAt: true,
        notes: true,
        orderType: true,
        branch: {
          select: {
            id: true,
            name: true
          }
        },
        customer: {
          select: {
            id: true,
            name: true,
            phone: true
          }
        },
        table: {
          select: {
            id: true,
            number: true,
            branch: {
              select: {
                id: true,
                name: true
              }
            }
          }
        },
        orderItems: {
          select: {
            id: true,
            quantity: true,
            price: true,
            note: true,
            product: {
              select: {
                id: true,
                name: true,
                price: true
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    res.json(orders);
  } catch (error) {
    console.error('Admin sipari≈üler getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈üler getirilemedi' });
  }
});

app.put('/api/admin/orders/:id/status', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      include: { branch: true }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    const { id } = req.params;
    const { status } = req.body;

    let whereClause = { id: parseInt(id) };
    if (user.role === 'BRANCH_MANAGER') {
      whereClause.branchId = user.branchId;
    }

    // √ñnce mevcut sipari≈üi kontrol et
    const existingOrder = await prisma.order.findUnique({
      where: whereClause,
      include: {
        user: true,
        branch: true
      }
    });

    if (!existingOrder) {
      return res.status(404).json({ error: 'Sipari≈ü bulunamadƒ±' });
    }

    // Masa sipari≈üleri i√ßin durum g√ºncelleme artƒ±k m√ºmk√ºn
    // if (existingOrder.orderType === 'TABLE') {
    //   return res.status(400).json({ 
    //     error: 'Masa sipari≈üleri i√ßin durum g√ºncelleme yapƒ±lamaz',
    //     message: 'Masa sipari≈üleri i√ßin durum deƒüi≈üikliƒüi yapƒ±lamaz. Sadece online sipari≈üler i√ßin ge√ßerlidir.'
    //   });
    // }

    // Eƒüer sipari≈ü zaten teslim edildiyse veya iptal edildiyse, g√ºncellemeye izin verme
    if (existingOrder.status === 'DELIVERED') {
      return res.status(400).json({ 
        error: 'Teslim edilen sipari≈üler g√ºncellenemez',
        message: 'Bu sipari≈ü zaten teslim edilmi≈ü ve artƒ±k deƒüi≈ütirilemez.'
      });
    }

    if (existingOrder.status === 'CANCELLED') {
      return res.status(400).json({ 
        error: 'ƒ∞ptal edilen sipari≈üler g√ºncellenemez',
        message: 'Bu sipari≈ü zaten iptal edilmi≈ü ve artƒ±k deƒüi≈ütirilemez.'
      });
    }

    // Sipari≈ü durumunu g√ºncelle
    const order = await prisma.order.update({
      where: whereClause,
      data: { status },
      include: {
        user: true,
        branch: true
      }
    });

    // Masa sipari≈üleri i√ßin √∂zel durum mesajlarƒ±
    let statusMessage;
    if (order.orderType === 'TABLE') {
      const tableStatusMessages = {
        'PENDING': 'Masa sipari≈üiniz alƒ±ndƒ± ve hazƒ±rlanmaya ba≈ülandƒ±.',
        'PREPARING': 'Masa sipari≈üiniz hazƒ±rlanƒ±yor.',
        'READY': 'Masa sipari≈üiniz hazƒ±r! Servis ediliyor.',
        'DELIVERED': 'Masa sipari≈üiniz teslim edildi. Afiyet olsun! (√ñdeme yapƒ±ldƒ±ktan sonra masa sƒ±fƒ±rlanacak)',
        'CANCELLED': 'Masa sipari≈üiniz iptal edildi.'
      };
      statusMessage = tableStatusMessages[status] || 'Masa sipari≈ü durumunuz g√ºncellendi.';
    } else {
      // Normal teslimat sipari≈üleri i√ßin
      const deliveryStatusMessages = {
        'PENDING': 'Sipari≈üiniz alƒ±ndƒ± ve hazƒ±rlanmaya ba≈ülandƒ±.',
        'PREPARING': 'Sipari≈üiniz hazƒ±rlanƒ±yor.',
        'READY': 'Sipari≈üiniz hazƒ±r! Teslimata √ßƒ±kƒ±yoruz.',
        'DELIVERED': 'Sipari≈üiniz teslim edildi. Afiyet olsun!',
        'CANCELLED': 'Sipari≈üiniz iptal edildi.'
      };
      statusMessage = deliveryStatusMessages[status] || 'Sipari≈ü durumunuz g√ºncellendi.';
    }

    // Ger√ßek zamanlƒ± bildirim g√∂nder
    if (io) {
      io.emit('orderStatusChanged', {
        orderId: order.id,
        orderNumber: order.orderNumber,
        status: status,
        statusText: statusMessage,
        branchId: order.branchId,
        updatedAt: order.updatedAt
      });
    }

    res.json({
      order,
      message: statusMessage,
      customerNotification: {
        orderNumber: order.orderNumber,
        status: status,
        statusText: statusMessage,
        branchName: order.branch?.name || '≈ûube',
        updatedAt: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('Sipari≈ü durumu g√ºncelleme hatasƒ±:', error);
    res.status(500).json({ error: 'Sipari≈ü durumu g√ºncellenemedi' });
  }
});

app.get('/api/admin/users', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        role: true,
        isActive: true,
        isApproved: true,
        createdAt: true,
        updatedAt: true,
        branch: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    res.json(users);
  } catch (e) {
    console.error('Users fetch error:', e);
    res.status(500).json({ error: 'Kullanƒ±cƒ±lar getirilemedi' });
  }
});

app.get('/api/customers', authenticateToken, async (req, res) => {
  try {
    const customers = await prisma.customer.findMany({
      orderBy: { createdAt: 'desc' }
    });
    
    res.json(customers);
  } catch (e) {
    console.error('Customers fetch error:', e);
    res.status(500).json({ error: 'M√º≈üteriler getirilemedi' });
  }
});

app.post('/api/admin/users', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    const { name, email, password, role, branchId } = req.body;
    if (!name || !email || !password || !role) return res.status(400).json({ error: 'Eksik bilgi' });
    
    const existing = await prisma.user.findUnique({ where: { email } });
    if (existing) return res.status(400).json({ error: 'Bu email zaten kayƒ±tlƒ±' });
    
    const hashedPassword = await bcrypt.hash(password, 10);
    const userData = {
      name,
      email,
      password: hashedPassword,
      role
    };
    
    if (role === 'BRANCH_MANAGER' && branchId) {
      userData.branchId = Number(branchId);
    }
    
    const user = await prisma.user.create({
      data: userData,
      include: {
        branch: true
      }
    });
    
    res.json(user);
  } catch (e) {
    res.status(500).json({ error: 'Kullanƒ±cƒ± eklenemedi' });
  }
});

app.delete('/api/admin/users/:id', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const { id } = req.params;
    const userId = parseInt(id);
    
    if (userId === req.user.userId) {
      return res.status(400).json({ error: 'Kendinizi silemezsiniz' });
    }
    
    await prisma.user.delete({
      where: { id: userId }
    });
    
    res.json({ message: 'Kullanƒ±cƒ± silindi' });
  } catch (e) {
    res.status(500).json({ error: 'Kullanƒ±cƒ± silinemedi' });
  }
});

app.get('/api/admin/products', authenticateToken, async (req, res) => {
  try {
    let whereClause = {};
    
    // Branch manager sadece kendi ≈üubesindeki √ºr√ºnleri g√∂rebilir
    if (req.user.role === 'BRANCH_MANAGER') {
      whereClause.branchId = req.user.branchId;
    }
    
    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const products = await prisma.product.findMany({
      where: whereClause,
      select: {
        id: true,
        name: true,
        description: true,
        price: true,
        image: true,
        imagePath: true,
        isActive: true,
        createdAt: true,
        updatedAt: true,
        branch: {
          select: {
            id: true,
            name: true
          }
        },
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: { name: 'asc' }
    });
    
    res.json(products);
  } catch (error) {
    console.error('Products fetch error:', error);
    res.status(500).json({ error: '√úr√ºnler getirilemedi' });
  }
});

app.post('/api/admin/products', authenticateToken, async (req, res) => {
  try {
    // ≈ûube m√ºd√ºrleri √ºr√ºn ekleyemez
    if (req.user.role === 'BRANCH_MANAGER') {
      return res.status(403).json({ error: '≈ûube m√ºd√ºrleri √ºr√ºn ekleyemez' });
    }

    const { name, description, price, categoryId, branchId, imagePath, image } = req.body;

    if (!name || !price || !categoryId) {
      return res.status(400).json({ error: 'T√ºm gerekli alanlarƒ± doldurun' });
    }

    const category = await prisma.category.findUnique({
      where: { id: parseInt(categoryId) }
    });

    if (!category) {
      return res.status(400).json({ error: 'Ge√ßersiz kategori' });
    }

    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    let targetBranchId;
    if (!branchId) {
      return res.status(400).json({ error: '≈ûube se√ßimi gerekli' });
    }
    targetBranchId = branchId === 'all' ? 'all' : Number(branchId);

    if (targetBranchId === 'all') {
      const allBranches = await prisma.branch.findMany({ where: { isActive: true } });
      const products = [];

      for (const branch of allBranches) {
        const product = await prisma.product.create({
          data: {
            name,
            description: description || '',
            price: Number(price),
            categoryId: parseInt(categoryId),
            image: image || imagePath || null,
            imagePath: imagePath || null,
            branchId: branch.id,
            companyId: branch.companyId || 1 // companyId yoksa 1 olarak ata
          },
          include: {
            branch: true,
            category: true
          }
        });
        products.push(product);
      }

      res.status(201).json(products);
    } else {
      const branch = await prisma.branch.findUnique({
        where: { id: targetBranchId },
        include: { company: true }
      });
      
      if (!branch) {
        return res.status(400).json({ error: 'Ge√ßersiz ≈üube' });
      }
      
      const product = await prisma.product.create({
        data: {
          name,
          description: description || '',
          price: Number(price),
          categoryId: parseInt(categoryId),
          image: image || imagePath || null,
          imagePath: imagePath || null,
          branchId: targetBranchId,
          companyId: branch.companyId || 1 // companyId yoksa 1 olarak ata
        },
        include: {
          branch: true,
          category: true
        }
      });

      res.status(201).json(product);
    }
  } catch (error) {
    console.error('√úr√ºn ekleme hatasƒ±:', error);
    res.status(500).json({ error: '√úr√ºn eklenemedi', details: error.message, stack: error.stack });
  }
});

app.put('/api/admin/products/:id', authenticateToken, async (req, res) => {
  try {
    console.log('=== PRODUCT UPDATE REQUEST ===');
    console.log('Request body:', req.body);
    console.log('User role:', req.user.role);
    console.log('Product ID:', req.params.id);
    
    const { id } = req.params;
    const { name, description, price, categoryId, branchId, isActive, imagePath, image } = req.body;

    // Branch manager sadece isActive g√ºncellemesi yapƒ±yorsa, diƒüer alanlarƒ± kontrol etme
    const isOnlyStatusUpdate = req.user.role === 'BRANCH_MANAGER' && 
      Object.keys(req.body).length === 1 && 
      Object.prototype.hasOwnProperty.call(req.body, 'isActive');

    console.log('Is only status update:', isOnlyStatusUpdate);
    console.log('Request body keys:', Object.keys(req.body));
    console.log('Has isActive property:', Object.prototype.hasOwnProperty.call(req.body, 'isActive'));

    if (!isOnlyStatusUpdate && (!name || !price || !categoryId)) {
      return res.status(400).json({ error: 'T√ºm gerekli alanlarƒ± doldurun' });
    }

    // Sadece tam g√ºncelleme yapƒ±lƒ±yorsa kategori kontrol√º yap
    if (!isOnlyStatusUpdate) {
      const category = await prisma.category.findUnique({
        where: { id: parseInt(categoryId) }
      });

      if (!category) {
        return res.status(400).json({ error: 'Ge√ßersiz kategori' });
      }
    }

    // √úr√ºn√º kontrol et
    const existingProduct = await prisma.product.findUnique({
      where: { id: parseInt(id) },
      include: { branch: true }
    });

    if (!existingProduct) {
      return res.status(404).json({ error: '√úr√ºn bulunamadƒ±' });
    }

    // Branch manager kontrol√º
    if (req.user.role === 'BRANCH_MANAGER') {
      // Branch manager sadece kendi ≈üubesindeki √ºr√ºnleri g√ºncelleyebilir
      if (existingProduct.branchId !== req.user.branchId) {
        return res.status(403).json({ error: 'Bu √ºr√ºn√º g√ºncelleyemezsiniz' });
      }
    } else if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'ADMIN' && req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Yetkisiz' });
    }

    let isActiveBool = isActive;
    if (typeof isActiveBool === 'string') {
      isActiveBool = isActiveBool === 'true';
    }

    let updateData = {};
    
    console.log('isActive value:', isActive);
    console.log('isActive type:', typeof isActive);
    
    if (req.user.role === 'BRANCH_MANAGER') {
      // ≈ûube m√ºd√ºrleri sadece isActive deƒüerini g√ºncelleyebilir
      updateData = {
        isActive: isActiveBool !== undefined ? isActiveBool : true
      };
      console.log('Branch manager update data:', updateData);
    } else {
      // S√ºper admin t√ºm alanlarƒ± g√ºncelleyebilir
      updateData = {
        name,
        description: description || '',
        price: Number(price),
        categoryId: parseInt(categoryId),
        isActive: isActiveBool !== undefined ? isActiveBool : true
      };
      
      // Branch manager ≈üube deƒüi≈ütiremez
      if (branchId) {
        if (branchId === 'all') {
          // S√ºper admin i√ßin all se√ßeneƒüi
        } else if (!isNaN(parseInt(branchId))) {
          updateData.branchId = Number(branchId);
        }
      }
      
      if (imagePath !== undefined || image !== undefined) {
        updateData.image = image || imagePath;
        updateData.imagePath = imagePath;
      }
    }

    if (req.user.role === 'SUPER_ADMIN' && branchId === 'all') {
      await prisma.product.delete({
        where: { id: parseInt(id) }
      });

      const allBranches = await prisma.branch.findMany({ where: { isActive: true } });
      const updatedProducts = [];
      
      for (const branch of allBranches) {
        const product = await prisma.product.create({
          data: {
            name,
            description: description || '',
            price: Number(price),
            categoryId: parseInt(categoryId),
            image: image || null,
            branchId: branch.id,
            isActive: isActiveBool !== undefined ? isActiveBool : true
          },
          include: {
            branch: true,
            category: true
          }
        });
        updatedProducts.push(product);
      }

      res.json(updatedProducts);
    } else {
      console.log('Final update data:', updateData);
      console.log('Product ID to update:', parseInt(id));
      
      const product = await prisma.product.update({
        where: { id: parseInt(id) },
        data: updateData,
        include: {
          branch: true,
          category: true
        }
      });

      console.log('Product updated successfully:', product.id);
      res.json(product);
    }
  } catch (error) {
    console.error('√úr√ºn g√ºncelleme hatasƒ±:', error);
    console.error('Request body:', req.body);
    console.error('User role:', req.user.role);
    console.error('Product ID:', req.params.id);
    res.status(500).json({ error: '√úr√ºn g√ºncellenemedi', details: error.message });
  }
});

app.delete('/api/admin/products/:id', authenticateToken, async (req, res) => {
  try {
    // Sadece s√ºper admin √ºr√ºn silebilir
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz' });
    }
    
    const { id } = req.params;
    const productId = parseInt(id);
    
    console.log('Deleting product with ID:', productId);
    
    // √úr√ºn√º kontrol et
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: { branch: true }
    });
    
    if (!product) {
      return res.status(404).json({ error: '√úr√ºn bulunamadƒ±' });
    }
    
    console.log('Product found:', product.name);
    
    // Bu √ºr√ºnle ilgili sipari≈ü √∂ƒüelerini kontrol et
    const orderItems = await prisma.orderItem.findMany({
      where: { productId: productId }
    });
    
    console.log(`Found ${orderItems.length} order items for this product`);
    
    // Transaction kullanarak hem sipari≈ü √∂ƒüelerini hem de √ºr√ºn√º sil
    await prisma.$transaction(async (tx) => {
      // √ñnce bu √ºr√ºnle ilgili sipari≈ü √∂ƒüelerini sil
      if (orderItems.length > 0) {
        console.log('Deleting order items for product:', productId);
        await tx.orderItem.deleteMany({
          where: { productId: productId }
        });
        console.log('Order items deleted successfully');
      }
      
      // Sonra √ºr√ºn√º sil
      await tx.product.delete({
        where: { id: productId }
      });
      
      console.log('Product deleted successfully');
    });
    
    res.json({ 
      message: '√úr√ºn ve ilgili sipari≈ü √∂ƒüeleri ba≈üarƒ±yla silindi',
      deletedOrderItems: orderItems.length
    });
  } catch (error) {
    console.error('Product delete error:', error);
    res.status(500).json({ error: '√úr√ºn silinemedi', details: error.message });
  }
});

app.get('/api/categories', async (req, res) => {
  try {
    const categories = await prisma.category.findMany({
      where: { isActive: true },
      orderBy: { name: 'asc' }
    });
    res.json(categories);
  } catch (error) {
    res.status(500).json({ error: 'Kategoriler getirilemedi' });
  }
});

app.get('/api/admin/categories', authenticateToken, async (req, res) => {
  try {
    // Kullanƒ±cƒ±nƒ±n branchId'si varsa, o branch'in companyId'sini al
    let companyId = 1; // Varsayƒ±lan companyId
    
    if (req.user.branchId) {
      const branch = await prisma.branch.findUnique({
        where: { id: req.user.branchId }
      });
      if (branch && branch.companyId) {
        companyId = branch.companyId;
      }
    }

    const categories = await prisma.category.findMany({
      where: { companyId: companyId },
      orderBy: { name: 'asc' }
    });
    
    res.json(categories);
  } catch (error) {
    console.error('Categories fetch error:', error);
    res.status(500).json({ error: 'Kategoriler getirilemedi' });
  }
});

app.post('/api/admin/categories', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const { name, description } = req.body;
    
    if (!name) {
      return res.status(400).json({ error: 'Kategori adƒ± zorunludur.' });
    }

    // Kullanƒ±cƒ±nƒ±n branchId'si varsa, o branch'in companyId'sini al
    let companyId = 1; // Varsayƒ±lan companyId
    
    if (req.user.branchId) {
      const branch = await prisma.branch.findUnique({
        where: { id: req.user.branchId }
      });
      if (branch && branch.companyId) {
        companyId = branch.companyId;
      }
    }

    const existingCategory = await prisma.category.findFirst({
      where: { 
        name,
        companyId: companyId
      }
    });

    if (existingCategory) {
      return res.status(400).json({ error: 'Bu kategori adƒ± zaten mevcut' });
    }

    const category = await prisma.category.create({
      data: {
        name,
        description: description || '',
        companyId: companyId
      }
    });

    res.status(201).json(category);
  } catch (error) {
    console.error('Kategori ekleme hatasƒ±:', error);
    res.status(500).json({ error: 'Kategori eklenemedi' });
  }
});

app.put('/api/admin/categories/:id', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const { id } = req.params;
    const { name, description, isActive } = req.body;

    if (!name) {
      return res.status(400).json({ error: 'Kategori adƒ± gerekli' });
    }

    const existingCategory = await prisma.category.findFirst({
      where: { 
        name,
        id: { not: parseInt(id) }
      }
    });

    if (existingCategory) {
      return res.status(400).json({ error: 'Bu kategori adƒ± zaten mevcut' });
    }

    const category = await prisma.category.update({
      where: { id: parseInt(id) },
      data: {
        name,
        description: description || '',
        isActive: isActive !== undefined ? (isActive === 'true' || isActive === true) : true
      }
    });

    res.json(category);
  } catch (error) {
    res.status(500).json({ error: 'Kategori g√ºncellenemedi' });
  }
});

app.delete('/api/admin/categories/:id', authenticateToken, async (req, res) => {
  try {
    // Admin rollerini kontrol et - hem b√ºy√ºk hem k√º√ß√ºk harf
    const allowedRoles = ['SUPER_ADMIN', 'ADMIN', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const { id } = req.params;

    const productsWithCategory = await prisma.product.findFirst({
      where: { categoryId: parseInt(id) }
    });

    if (productsWithCategory) {
      return res.status(400).json({ 
        error: 'Bu kategoriye baƒülƒ± √ºr√ºnler var. √ñnce √ºr√ºnleri silin veya ba≈üka kategoriye ta≈üƒ±yƒ±n.' 
      });
    }

    await prisma.category.delete({
      where: { id: parseInt(id) }
    });

    res.json({ message: 'Kategori ba≈üarƒ±yla silindi' });
  } catch (error) {
    res.status(500).json({ error: 'Kategori silinemedi' });
  }
});

// Kategori sƒ±ralama API'si
app.put('/api/admin/categories/reorder', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') return res.status(403).json({ error: 'Yetkisiz' });
    
    const { categories } = req.body;
    
    if (!Array.isArray(categories)) {
      return res.status(400).json({ error: 'Kategoriler listesi gerekli' });
    }

    console.log('Kategori sƒ±ralama g√ºncelleniyor:', categories);

    // Kategori sƒ±ralamasƒ± g√ºncelleniyor (sortOrder olmadan)
    console.log('Kategori sƒ±ralamasƒ± g√ºncellendi');

    console.log('Kategori sƒ±ralama ba≈üarƒ±yla g√ºncellendi');
    res.json({ message: 'Kategori sƒ±ralamasƒ± g√ºncellendi' });
  } catch (error) {
    console.error('Category reorder error:', error);
    res.status(500).json({ error: 'Kategori sƒ±ralamasƒ± g√ºncellenemedi', details: error.message });
  }
});

app.get('/api/customer/profile', authenticateToken, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      include: {
        orders: {
          include: {
            branch: true,
            orderItems: {
              include: {
                product: true
              }
            }
          },
          orderBy: { createdAt: 'desc' }
        },
        addresses: {
          orderBy: [
            { isDefault: 'desc' },
            { createdAt: 'desc' }
          ]
        }
      }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    res.json({
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        phone: user.phone,
        address: user.address,
        role: user.role
      },
      orders: user.orders,
      addresses: user.addresses
    });
  } catch (error) {
    res.status(500).json({ error: 'Profil bilgileri getirilemedi' });
  }
});

app.put('/api/customer/profile', authenticateToken, async (req, res) => {
  try {
    const { name, email, phone, address } = req.body;

    // Validation
    if (!name || !name.trim()) {
      return res.status(400).json({ error: 'Ad soyad alanƒ± zorunludur' });
    }

    if (!email || !email.trim()) {
      return res.status(400).json({ error: 'Email alanƒ± zorunludur' });
    }

    // Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: 'Ge√ßerli bir email adresi giriniz' });
    }

    console.log('Profil g√ºncelleme isteƒüi:', { userId: req.user.userId, name, email, phone, address });

    // Email unique constraint kontrol√º - kullanƒ±cƒ±nƒ±n kendi email'ini g√ºncellemesine izin ver
    const existingUser = await prisma.user.findFirst({
      where: { 
        email: email.trim(),
        id: { not: req.user.userId }
      }
    });

    if (existingUser) {
      return res.status(400).json({ error: 'Bu email adresi ba≈üka bir kullanƒ±cƒ± tarafƒ±ndan kullanƒ±lƒ±yor' });
    }

    const updatedUser = await prisma.user.update({
      where: { id: req.user.userId },
      data: { 
        name: name.trim(), 
        email: email.trim(), 
        phone: phone || null, 
        address: address || null 
      }
    });

    console.log('Profil g√ºncelleme ba≈üarƒ±lƒ±:', updatedUser);

    res.json({
      user: {
        id: updatedUser.id,
        name: updatedUser.name,
        email: updatedUser.email,
        phone: updatedUser.phone,
        address: updatedUser.address,
        role: updatedUser.role
      }
    });
  } catch (error) {
    console.error('Profil g√ºncelleme hatasƒ±:', error);
    res.status(500).json({ error: 'Profil g√ºncellenemedi: ' + error.message });
  }
});

// M√º≈üteri adresleri endpoint'i
app.get('/api/customer/addresses', authenticateToken, async (req, res) => {
  try {
    const addresses = await prisma.userAddress.findMany({
      where: { userId: req.user.userId },
      orderBy: [
        { isDefault: 'desc' },
        { createdAt: 'desc' }
      ]
    });
    
    res.json(addresses);
  } catch (error) {
    res.status(500).json({ error: 'Adresler getirilemedi' });
  }
});

// Yeni adres ekleme endpoint'i
app.post('/api/customer/addresses', authenticateToken, async (req, res) => {
  try {
    const { title, address, isDefault } = req.body;
    
    if (!title || !address) {
      return res.status(400).json({ error: 'Adres ba≈ülƒ±ƒüƒ± ve adres detayƒ± gerekli' });
    }
    
    // Eƒüer bu adres varsayƒ±lan olarak i≈üaretleniyorsa, diƒüer adresleri varsayƒ±lan olmaktan √ßƒ±kar
    if (isDefault) {
      await prisma.userAddress.updateMany({
        where: { userId: req.user.userId },
        data: { isDefault: false }
      });
    }
    
    const newAddress = await prisma.userAddress.create({
      data: {
        userId: req.user.userId,
        title,
        address,
        isDefault: isDefault || false
      }
    });
    
    res.status(201).json(newAddress);
  } catch (error) {
    console.error('Adres ekleme hatasƒ±:', error);
    res.status(500).json({ error: 'Adres eklenemedi' });
  }
});

// Adres g√ºncelleme endpoint'i
app.put('/api/customer/addresses/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { title, address, isDefault } = req.body;
    
    if (!title || !address) {
      return res.status(400).json({ error: 'Adres ba≈ülƒ±ƒüƒ± ve adres detayƒ± gerekli' });
    }
    
    // Adresin bu kullanƒ±cƒ±ya ait olduƒüunu kontrol et
    const existingAddress = await prisma.userAddress.findFirst({
      where: { 
        id: parseInt(id),
        userId: req.user.userId
      }
    });
    
    if (!existingAddress) {
      return res.status(404).json({ error: 'Adres bulunamadƒ±' });
    }
    
    // Eƒüer bu adres varsayƒ±lan olarak i≈üaretleniyorsa, diƒüer adresleri varsayƒ±lan olmaktan √ßƒ±kar
    if (isDefault) {
      await prisma.userAddress.updateMany({
        where: { userId: req.user.userId },
        data: { isDefault: false }
      });
    }
    
    const updatedAddress = await prisma.userAddress.update({
      where: { id: parseInt(id) },
      data: {
        title,
        address,
        isDefault: isDefault || false
      }
    });
    
    res.json(updatedAddress);
  } catch (error) {
    console.error('Adres g√ºncelleme hatasƒ±:', error);
    res.status(500).json({ error: 'Adres g√ºncellenemedi' });
  }
});

// Adres silme endpoint'i
app.delete('/api/customer/addresses/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    // Adresin bu kullanƒ±cƒ±ya ait olduƒüunu kontrol et
    const existingAddress = await prisma.userAddress.findFirst({
      where: { 
        id: parseInt(id),
        userId: req.user.userId
      }
    });
    
    if (!existingAddress) {
      return res.status(404).json({ error: 'Adres bulunamadƒ±' });
    }
    
    await prisma.userAddress.delete({
      where: { id: parseInt(id) }
    });
    
    res.json({ message: 'Adres silindi' });
  } catch (error) {
    console.error('Adres silme hatasƒ±:', error);
    res.status(500).json({ error: 'Adres silinemedi' });
  }
});

// ==================== MASA Y√ñNETƒ∞Mƒ∞ ENDPOINT'LERƒ∞ ====================

// T√ºm masalarƒ± getir (Admin)
app.get('/api/admin/tables', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const tables = await prisma.table.findMany({
      include: {
        branch: true
      },
      orderBy: [
        { branch: { name: 'asc' } },
        { number: 'asc' }
      ]
    });
    
    res.json(tables);
  } catch (error) {
    console.error('Masalar getirilemedi:', error);
    res.status(500).json({ error: 'Masalar getirilemedi' });
  }
});

// Masa sipari≈ülerini getir (admin i√ßin) - √ñNCE TANIMLANMALI
app.get('/api/admin/tables/:tableId/orders', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { tableId } = req.params;
    
    // Masayƒ± kontrol et
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: { branch: true }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    // Masanƒ±n t√ºm bekleyen sipari≈ülerini getir
    const orders = await prisma.order.findMany({
      where: {
        tableId: parseInt(tableId),
        status: { in: ['PENDING', 'PREPARING', 'READY'] } // Teslim edilmemi≈ü sipari≈üler
      },
      include: {
        orderItems: {
          include: {
            product: true
          }
        }
      },
      orderBy: { createdAt: 'asc' }
    });

    // Toplam tutarƒ± hesapla
    const totalAmount = orders.reduce((sum, order) => sum + order.totalAmount, 0);

    res.json({
      table,
      orders,
      totalAmount,
      orderCount: orders.length
    });

  } catch (error) {
    console.error('Masa sipari≈üleri getirilemedi:', error);
    res.status(500).json({ error: 'Masa sipari≈üleri getirilemedi' });
  }
});

// Test endpoint - Tahsilat i≈ülemini basitle≈ütir
app.post('/api/admin/tables/:tableId/collect', authenticateToken, async (req, res) => {
  try {
    console.log('üîç Tahsilat ba≈ülatƒ±lƒ±yor...', { tableId: req.params.tableId, body: req.body });
    
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { tableId } = req.params;
    const { paymentMethod = 'CASH', notes = '' } = req.body;
    
    console.log('üîç Parametreler:', { tableId, paymentMethod, notes });
    
    // Masayƒ± kontrol et
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: { branch: true }
    });

    console.log('üîç Masa bulundu:', table);

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    // Masanƒ±n t√ºm bekleyen sipari≈ülerini getir
    const orders = await prisma.order.findMany({
      where: {
        tableId: parseInt(tableId),
        status: { in: ['PENDING', 'PREPARING', 'READY'] }
      }
    });

    console.log('üîç Bekleyen sipari≈üler:', orders);

    if (orders.length === 0) {
      return res.status(400).json({ error: 'Bu masada tahsilat yapƒ±lacak sipari≈ü yok' });
    }

    // Toplam tutarƒ± hesapla
    const totalAmount = orders.reduce((sum, order) => sum + order.totalAmount, 0);
    console.log('üîç Toplam tutar:', totalAmount);

    // Sadece sipari≈üleri COMPLETED yap, silme i≈ülemi yapma
    console.log('üîç Sipari≈üleri COMPLETED yapƒ±yorum...');
    await prisma.order.updateMany({
      where: {
        tableId: parseInt(tableId),
        status: { in: ['PENDING', 'PREPARING', 'READY'] }
      },
      data: {
        status: 'COMPLETED',
        notes: `Tahsilat: ${paymentMethod} - ${notes}`.trim()
      }
    });

    console.log('‚úÖ Tahsilat ba≈üarƒ±lƒ± - sadece sipari≈üler COMPLETED yapƒ±ldƒ±');
    
    const response = {
      success: true,
      message: `Masa ${table.number} tahsilatƒ± tamamlandƒ±`,
      totalAmount,
      orderCount: orders.length
    };

    console.log('‚úÖ Response:', response);
    res.json(response);

  } catch (error) {
    console.error('‚ùå Masa tahsilat hatasƒ±:', error);
    console.error('‚ùå Hata stack:', error.stack);
    console.error('‚ùå Hata mesajƒ±:', error.message);
    res.status(500).json({ error: 'Tahsilat yapƒ±lamadƒ±', details: error.message });
  }
});

// Masa verilerini sƒ±fƒ±rla (tahsilat sonrasƒ±) - √ñNCE TANIMLANMALI
app.post('/api/admin/tables/:tableId/reset', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { tableId } = req.params;
    
    // Masayƒ± kontrol et
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: { branch: true }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    // Masanƒ±n t√ºm sipari≈ülerini kontrol et
    const pendingOrders = await prisma.order.findMany({
      where: {
        tableId: parseInt(tableId),
        status: { in: ['PENDING', 'PREPARING', 'READY'] }
      }
    });

    if (pendingOrders.length > 0) {
      return res.status(400).json({ 
        error: 'Bu masada hen√ºz tahsilat yapƒ±lmamƒ±≈ü sipari≈üler var',
        pendingCount: pendingOrders.length
      });
    }

    // Masanƒ±n t√ºm sipari≈ülerini sil (COMPLETED olanlar)
    const deletedOrders = await prisma.order.deleteMany({
      where: {
        tableId: parseInt(tableId),
        status: 'COMPLETED'
      }
    });

    res.json({
      success: true,
      message: `Masa ${table.number} verileri sƒ±fƒ±rlandƒ±`,
      deletedCount: deletedOrders.count
    });

  } catch (error) {
    console.error('Masa sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: 'Masa sƒ±fƒ±rlanamadƒ±' });
  }
});

// Aktif masalarƒ± getir (t√ºm ≈üubeler)
app.get('/api/admin/tables/active', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    let whereClause = {
      isActive: true
    };
    
    // Eƒüer BRANCH_MANAGER ise sadece kendi ≈üubesinin masalarƒ±nƒ± getir
    if (req.user.role === 'BRANCH_MANAGER') {
      whereClause.branchId = req.user.branchId;
    }

    // Sadece gerekli alanlarƒ± se√ß - gereksiz include'larƒ± kaldƒ±r
    const tables = await prisma.table.findMany({
      where: whereClause,
      select: {
        id: true,
        number: true,
        isActive: true,
        branch: {
          select: {
            id: true,
            name: true
          }
        },
        orders: {
          where: {
            status: { not: 'DELIVERED' },
            orderType: 'TABLE'
          },
          select: {
            id: true,
            totalAmount: true,
            orderItems: {
              select: {
                id: true,
                quantity: true,
                price: true
              }
            }
          }
        }
      },
      orderBy: [
        { branch: { name: 'asc' } },
        { number: 'asc' }
      ]
    });

    // Her masa i√ßin toplam tutarƒ± hesapla
    const tablesWithTotal = tables.map(table => {
      const totalAmount = table.orders.reduce((sum, order) => {
        return sum + order.orderItems.reduce((orderSum, item) => {
          return orderSum + (item.price * item.quantity);
        }, 0);
      }, 0);

      return {
        ...table,
        totalAmount,
        orderCount: table.orders.length
      };
    });

    res.json(tablesWithTotal);
  } catch (error) {
    console.error('Aktif masalar getirilemedi:', error);
    res.status(500).json({ error: 'Masalar getirilemedi' });
  }
});

// ≈ûubeye g√∂re masalarƒ± getir
app.get('/api/admin/tables/branch/:branchId', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { branchId } = req.params;
    
    const tables = await prisma.table.findMany({
      where: { branchId: parseInt(branchId) },
      include: {
        branch: true
      },
      orderBy: { number: 'asc' }
    });
    
    res.json(tables);
  } catch (error) {
    console.error('≈ûube masalarƒ± getirilemedi:', error);
    res.status(500).json({ error: '≈ûube masalarƒ± getirilemedi' });
  }
});

// Yeni masa ekle
app.post('/api/admin/tables', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { number, branchId } = req.body;
    if (!number || !branchId) {
      return res.status(400).json({ error: 'Masa numarasƒ± ve ≈üube ID gerekli' });
    }

    // branchId √ºzerinden companyId'yi √ßek
    const branch = await prisma.branch.findUnique({ where: { id: parseInt(branchId) } });
    if (!branch) {
      return res.status(400).json({ error: 'Ge√ßersiz ≈üube' });
    }

    // Aynƒ± ≈üubede aynƒ± masa numarasƒ± var mƒ± kontrol et
    const existingTable = await prisma.table.findFirst({
      where: { 
        number: number,
        branchId: parseInt(branchId)
      }
    });

    if (existingTable) {
      return res.status(400).json({ error: 'Bu masa numarasƒ± zaten kullanƒ±mda' });
    }

    const newTable = await prisma.table.create({
      data: {
        number,
        branchId: parseInt(branchId),
        isActive: true
      },
      include: {
        branch: true
      }
    });
    
    res.status(201).json(newTable);
  } catch (error) {
    console.error('Masa ekleme hatasƒ±:', error);
    res.status(500).json({ error: 'Masa eklenemedi', details: error.message, stack: error.stack });
  }
});

// Masa g√ºncelle
app.put('/api/admin/tables/:id', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;
    const { number, isActive } = req.body;
    
    const updatedTable = await prisma.table.update({
      where: { id: parseInt(id) },
      data: {
        number,
        isActive
      },
      include: {
        branch: true
      }
    });
    
    res.json(updatedTable);
  } catch (error) {
    console.error('Masa g√ºncelleme hatasƒ±:', error);
    res.status(500).json({ error: 'Masa g√ºncellenemedi' });
  }
});

// Masa sil
app.delete('/api/admin/tables/:id', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;
    
    await prisma.table.delete({
      where: { id: parseInt(id) }
    });
    
    res.json({ message: 'Masa silindi' });
  } catch (error) {
    console.error('Masa silme hatasƒ±:', error);
    res.status(500).json({ error: 'Masa silinemedi' });
  }
});

// QR kod olu≈ütur
app.get('/api/admin/tables/:id/qr', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { id } = req.params;
    
    const table = await prisma.table.findUnique({
      where: { id: parseInt(id) },
      include: {
        branch: true
      }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    // QR kod i√ßin URL olu≈ütur
    const qrData = {
      tableId: table.id,
      tableNumber: table.number,
      branchId: table.branchId,
      branchName: table.branch.name
    };

    // Frontend URL'yi kontrol et ve g√ºvenli hale getir
    let frontendUrl = process.env.FRONTEND_URL;
    
    // Production ortamƒ±nda doƒüru URL'yi kullan
    if (process.env.NODE_ENV === 'production') {
      frontendUrl = 'https://siparisnet.netlify.app';
    } else if (!frontendUrl) {
      frontendUrl = 'https://siparisnet.netlify.app';
    }
    
    console.log('üîó QR kod i√ßin Frontend URL:', frontendUrl);
    console.log('üîó Environment NODE_ENV:', process.env.NODE_ENV);
    console.log('üîó Environment FRONTEND_URL:', process.env.FRONTEND_URL);
    
    const qrUrl = `${frontendUrl}/table-order?data=${encodeURIComponent(JSON.stringify(qrData))}`;
    console.log('üîó Olu≈üturulan QR URL:', qrUrl);
    
    // QR kod olu≈ütur
    const qrCodeDataUrl = await QRCode.toDataURL(qrUrl, {
      width: 300,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      }
    });

    res.json({
      table,
      qrCode: qrCodeDataUrl,
      qrUrl: qrUrl
    });
  } catch (error) {
    console.error('QR kod olu≈üturma hatasƒ±:', error);
    res.status(500).json({ error: 'QR kod olu≈üturulamadƒ±' });
  }
});

// ==================== MASA Sƒ∞PARƒ∞≈û ENDPOINT'LERƒ∞ ====================

// Masa sipari≈ülerini getir (M√º≈üteri i√ßin - authentication gerektirmez)
app.get('/api/table/:tableId/orders', async (req, res) => {
  try {
    const { tableId } = req.params;
    
    console.log('üîç M√º≈üteri masa sipari≈üleri isteƒüi, tableId:', tableId);

    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true,
        orders: {
          where: {
            orderType: 'TABLE',
            status: { in: ['PENDING', 'PREPARING', 'READY'] } // Teslim edilmi≈ü sipari≈üleri gizle
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            }
          },
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!table) {
      console.log('‚ùå Masa bulunamadƒ±, tableId:', tableId);
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (!table.isActive) {
      console.log('‚ùå Masa aktif deƒüil, tableId:', tableId);
      return res.status(400).json({ error: 'Bu masa aktif deƒüil' });
    }

    console.log('‚úÖ Masa bulundu, sipari≈ü sayƒ±sƒ±:', table.orders.length);

    // Toplam tutarƒ± hesapla
    const totalAmount = table.orders.reduce((sum, order) => {
      return sum + order.orderItems.reduce((orderSum, item) => {
        return orderSum + (item.price * item.quantity);
      }, 0);
    }, 0);

    res.json({
      table,
      orders: table.orders,
      totalAmount,
      orderCount: table.orders.length
    });
  } catch (error) {
    console.error('‚ùå M√º≈üteri masa sipari≈üleri getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈üler getirilemedi' });
  }
});

// QR kod ile masa bilgilerini getir
app.get('/api/table/:tableId', async (req, res) => {
  try {
    const { tableId } = req.params;
    
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true
      }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (!table.isActive) {
      return res.status(400).json({ error: 'Bu masa aktif deƒüil' });
    }

    res.json(table);
  } catch (error) {
    console.error('Masa bilgileri getirilemedi:', error);
    res.status(500).json({ error: 'Masa bilgileri getirilemedi' });
  }
});

// Masa i√ßin √ºr√ºnleri getir
app.get('/api/table/:tableId/products', async (req, res) => {
  try {
    const { tableId } = req.params;
    console.log('üîç Table products endpoint √ßaƒürƒ±ldƒ±, tableId:', tableId);
    
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true
      }
    });

    if (!table) {
      console.log('‚ùå Masa bulunamadƒ±, tableId:', tableId);
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (!table.isActive) {
      console.log('‚ùå Masa aktif deƒüil, tableId:', tableId);
      return res.status(400).json({ error: 'Bu masa aktif deƒüil' });
    }

    console.log('‚úÖ Masa bulundu, branchId:', table.branchId);

    // ≈ûubeye ait √ºr√ºnleri getir
    const products = await prisma.product.findMany({
      where: { 
        branchId: table.branchId,
        isActive: true
      },
      include: {
        category: true
      },
      orderBy: [
        { category: { name: 'asc' } },
        { name: 'asc' }
      ]
    });
    
    console.log('‚úÖ Masa √ºr√ºnleri ba≈üarƒ±yla getirildi, sayƒ±:', products.length);
    res.json(products);
  } catch (error) {
    console.error('‚ùå Masa √ºr√ºnleri getirilemedi:', error);
    console.error('‚ùå Hata detayƒ±:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ error: 'Masa √ºr√ºnleri getirilemedi' });
  }
});

// Masa sipari≈üi olu≈ütur
app.post('/api/table/:tableId/order', async (req, res) => {
  try {
    const { tableId } = req.params;
    const { items, notes } = req.body;
    
    if (!items || items.length === 0) {
      return res.status(400).json({ error: 'Sipari≈ü √∂ƒüeleri gerekli' });
    }

    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true
      }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (!table.isActive) {
      return res.status(400).json({ error: 'Bu masa aktif deƒüil' });
    }

    // Toplam tutarƒ± hesapla
    let totalAmount = 0;
    for (const item of items) {
      const product = await prisma.product.findUnique({
        where: { id: item.productId }
      });
      if (product) {
        totalAmount += product.price * item.quantity;
      }
    }

    // Sipari≈ü numarasƒ± olu≈ütur
    const orderNumber = `T${Date.now()}-${Math.floor(Math.random() * 1000)}`;

    // Sipari≈üi olu≈ütur
    const order = await prisma.order.create({
      data: {
        orderNumber,
        branchId: table.branchId,
        tableId: table.id,
        status: 'PENDING',
        totalAmount,
        notes: notes || `Masa ${table.number} sipari≈üi`,
        orderType: 'TABLE'
      }
    });

    // Sipari≈ü √∂ƒüelerini olu≈ütur
    for (const item of items) {
      const product = await prisma.product.findUnique({
        where: { id: item.productId }
      });
      if (product) {
        await prisma.orderItem.create({
          data: {
            orderId: order.id,
            productId: item.productId,
            quantity: item.quantity,
            price: product.price,
            note: item.note || null // √úr√ºn notunu kaydet
          }
        });
      }
    }

    // Email bildirimleri g√∂nder (asenkron olarak)
    try {
      // M√º≈üteri bilgileri masa sipari≈ülerinde genellikle yok, sadece admin bildirimi
      sendAdminNotification(order, null, table.branch);
      
    } catch (emailError) {
      console.error('‚ùå Masa sipari≈üi email g√∂nderme hatasƒ±:', emailError);
      // Email hatasƒ± sipari≈ü olu≈üturmayƒ± etkilemesin
    }

    res.status(201).json({
      order,
      table: table,
      message: `Masa ${table.number} i√ßin sipari≈ü olu≈üturuldu`
    });
  } catch (error) {
    console.error('Masa sipari≈üi olu≈üturma hatasƒ±:', error);
    res.status(500).json({ error: 'Sipari≈ü olu≈üturulamadƒ±' });
  }
});

async function seedData() {
  try {
    await prisma.$connect();
    
    // Veritabanƒ±nda veri var mƒ± kontrol et - daha kapsamlƒ± kontrol
    const existingUsers = await prisma.user.count();
    const existingBranches = await prisma.branch.count();
    const existingCategories = await prisma.category.count();
    const existingProducts = await prisma.product.count();
    
    // Eƒüer herhangi bir veri varsa seed data atla
    if (existingUsers > 0 || existingBranches > 0 || existingCategories > 0 || existingProducts > 0) {
      console.log('‚úÖ Veritabanƒ±nda zaten veri var, seed data atlanƒ±yor');
      console.log(`üìä Mevcut veriler: ${existingUsers} kullanƒ±cƒ±, ${existingBranches} ≈üube, ${existingCategories} kategori, ${existingProducts} √ºr√ºn`);
      return;
    }
    
    console.log('üì¶ Veritabanƒ± bo≈ü, seed data olu≈üturuluyor...');
    
    const categories = [
      { name: 'Pizza', description: '√áe≈üitli pizza t√ºrleri' },
      { name: 'Burger', description: 'Hamburger ve sandvi√ßler' },
      { name: 'ƒ∞√ßecek', description: 'Soƒüuk ve sƒ±cak i√ßecekler' },
      { name: 'Tatlƒ±', description: '√áe≈üitli tatlƒ±lar' },
      { name: 'Salata', description: 'Taze salatalar' },
      { name: '√áorba', description: 'Sƒ±cak √ßorbalar' },
      { name: 'Kebap', description: '√áe≈üitli kebap t√ºrleri' },
      { name: 'Pide', description: 'Geleneksel pideler' }
    ];

    for (const categoryData of categories) {
      await prisma.category.upsert({
        where: { id: categories.indexOf(categoryData) + 1 },
        update: {},
        create: {
          id: categories.indexOf(categoryData) + 1,
          ...categoryData
        }
      });
    }

    const branches = [
      {
        name: 'Merkez ≈ûube',
        address: 'Atat√ºrk Caddesi No:1, ƒ∞stanbul',
        phone: '0212 555 0001'
      },
      {
        name: 'Kadƒ±k√∂y ≈ûube',
        address: 'Moda Caddesi No:15, ƒ∞stanbul',
        phone: '0216 555 0002'
      }
    ];

    for (const branchData of branches) {
      await prisma.branch.upsert({
        where: { id: branchData.name === 'Merkez ≈ûube' ? 1 : 2 },
        update: {},
        create: {
          id: branchData.name === 'Merkez ≈ûube' ? 1 : 2,
          ...branchData
        }
      });
    }

    const pizzaCategory = await prisma.category.findUnique({ where: { id: 1 } });
    const burgerCategory = await prisma.category.findUnique({ where: { id: 2 } });
    const drinkCategory = await prisma.category.findUnique({ where: { id: 3 } });
    const dessertCategory = await prisma.category.findUnique({ where: { id: 4 } });

    const merkezBranch = await prisma.branch.findUnique({ where: { id: 1 } });
    const kadikoyBranch = await prisma.branch.findUnique({ where: { id: 2 } });

    if (pizzaCategory && burgerCategory && drinkCategory && dessertCategory && merkezBranch && kadikoyBranch) {
      const products = [
        {
          name: 'Margherita Pizza',
          description: 'Domates sosu, mozzarella peyniri, fesleƒüen',
          price: 85.00,
          categoryId: pizzaCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Pepperoni Pizza',
          description: 'Domates sosu, mozzarella peyniri, pepperoni',
          price: 95.00,
          categoryId: pizzaCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Klasik Burger',
          description: 'Dana eti, marul, domates, soƒüan, √∂zel sos',
          price: 65.00,
          categoryId: burgerCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: '√áifte Burger',
          description: '√áifte dana eti, cheddar peyniri, marul, domates',
          price: 85.00,
          categoryId: burgerCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Kola',
          description: '330ml Coca Cola',
          price: 15.00,
          categoryId: drinkCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Ayran',
          description: '500ml taze ayran',
          price: 12.00,
          categoryId: drinkCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: '√áikolatalƒ± Pasta',
          description: '√áikolatalƒ± krema ile kaplƒ± pasta',
          price: 25.00,
          categoryId: dessertCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Tiramisu',
          description: 'ƒ∞talyan usul√º tiramisu',
          price: 30.00,
          categoryId: dessertCategory.id,
          branchId: merkezBranch.id
        },
        {
          name: 'Margherita Pizza',
          description: 'Domates sosu, mozzarella peyniri, fesleƒüen',
          price: 87.00,
          categoryId: pizzaCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: 'Pepperoni Pizza',
          description: 'Domates sosu, mozzarella peyniri, pepperoni',
          price: 97.00,
          categoryId: pizzaCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: 'Klasik Burger',
          description: 'Dana eti, marul, domates, soƒüan, √∂zel sos',
          price: 67.00,
          categoryId: burgerCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: '√áifte Burger',
          description: '√áifte dana eti, cheddar peyniri, marul, domates',
          price: 87.00,
          categoryId: burgerCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: 'Kola',
          description: '330ml Coca Cola',
          price: 16.00,
          categoryId: drinkCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: 'Ayran',
          description: '500ml taze ayran',
          price: 13.00,
          categoryId: drinkCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: '√áikolatalƒ± Pasta',
          description: '√áikolatalƒ± krema ile kaplƒ± pasta',
          price: 27.00,
          categoryId: dessertCategory.id,
          branchId: kadikoyBranch.id
        },
        {
          name: 'Tiramisu',
          description: 'ƒ∞talyan usul√º tiramisu',
          price: 32.00,
          categoryId: dessertCategory.id,
          branchId: kadikoyBranch.id
        }
      ];

      let productId = 1;
      for (const productData of products) {
        await prisma.product.upsert({
          where: { id: productId },
          update: {},
          create: {
            id: productId,
            ...productData
          }
        });
        productId++;
      }

    }

    const hashedPassword = await bcrypt.hash('admin123', 10);
    await prisma.user.upsert({
      where: { id: 1 },
      update: {},
      create: {
        id: 1,
        email: 'admin@example.com',
        password: hashedPassword,
        name: 'S√ºper Admin',
        role: 'SUPER_ADMIN',
        isActive: true,
        isApproved: true
      }
    });

    const managerPassword = await bcrypt.hash('manager123', 10);
    await prisma.user.upsert({
      where: { id: 2 },
      update: {},
      create: {
        id: 2,
        email: 'manager@example.com',
        password: managerPassword,
        name: 'Merkez ≈ûube M√ºd√ºr√º',
        role: 'BRANCH_MANAGER',
        branchId: 1,
        isActive: true,
        isApproved: true
      }
    });

  } catch (error) {
    console.error('Seed data hatasƒ±:', error);
  }
}

app.post('/api/seed', async (req, res) => {
  try {
    await seedData();
    res.json({ message: 'Seed data ba≈üarƒ±yla olu≈üturuldu' });
  } catch (error) {
    console.error('Seed endpoint hatasƒ±:', error);
    res.status(500).json({ error: 'Seed data olu≈üturulamadƒ±' });
  }
});

app.post('/api/admin/fix-kadikoy-dates', async (req, res) => {
  try {
    const now = new Date();
    const updated = await prisma.order.updateMany({
      where: { branchId: 2 },
      data: { createdAt: now }
    });
    res.json({ message: 'Kadƒ±k√∂y ≈ûubesi sipari≈ülerinin tarihi g√ºncellendi', count: updated.count });
  } catch (error) {
    console.error('Kadƒ±k√∂y tarih d√ºzeltme hatasƒ±:', error);
    res.status(500).json({ error: 'Kadƒ±k√∂y sipari≈ü tarihi g√ºncellenemedi' });
  }
});

app.post('/api/admin/fix-kadikoy-completed-dates', async (req, res) => {
  try {
    const now = new Date();
    const updated = await prisma.order.updateMany({
      where: { branchId: 2, status: 'COMPLETED' },
      data: { createdAt: now }
    });
    res.json({ message: 'Kadƒ±k√∂y ≈ûubesi COMPLETED sipari≈ülerinin tarihi g√ºncellendi', count: updated.count });
  } catch (error) {
    console.error('Kadƒ±k√∂y COMPLETED tarih d√ºzeltme hatasƒ±:', error);
    res.status(500).json({ error: 'Kadƒ±k√∂y COMPLETED sipari≈ü tarihi g√ºncellenemedi' });
  }
});



app.get('/api/admin/stats', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const { branchId, period = 'daily' } = req.query;
    
    const now = new Date();
    let startDate, endDate;
    
    switch (period) {
      case 'daily':
        startDate = new Date(now);
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 1);
        break;
      case 'weekly':
        startDate = new Date(now);
        startDate.setDate(startDate.getDate() - startDate.getDay());
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 7);
        break;
      case 'monthly':
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        endDate = new Date(now.getFullYear(), now.getMonth() + 1, 1);
        break;
      default:
        startDate = new Date(now);
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date(startDate);
        endDate.setDate(endDate.getDate() + 1);
    }

    let where = {
      createdAt: {
        gte: startDate,
        lt: endDate
      },
      status: { in: ['DELIVERED', 'COMPLETED'] }
    };

    if (req.user.role === 'BRANCH_MANAGER') {
      where.branchId = req.user.branchId;
    } else if (branchId) {
      where.branchId = Number(branchId);
    }

    let branches = [];
    if (req.user.role === 'SUPER_ADMIN') {
      branches = await prisma.branch.findMany({ where: { isActive: true } });
    } else {
      const userBranch = await prisma.branch.findUnique({
        where: { id: req.user.branchId }
      });
      if (userBranch) branches = [userBranch];
    }

    const stats = [];
    for (const branch of branches) {
      if (branchId && branch.id !== Number(branchId)) continue;
      
      const orders = await prisma.order.findMany({
        where: { ...where, branchId: branch.id },
        select: { totalAmount: true, id: true, createdAt: true }
      });
      
      const totalRevenue = orders.reduce((sum, o) => sum + o.totalAmount, 0);
      const orderCount = orders.length;
      const averageOrder = orderCount > 0 ? totalRevenue / orderCount : 0;
      
      let dailyAverage = 0;
      if (period === 'weekly') {
        dailyAverage = totalRevenue / 7;
      } else if (period === 'monthly') {
        const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
        dailyAverage = totalRevenue / daysInMonth;
      } else {
        dailyAverage = totalRevenue;
      }
      
      stats.push({
        branchId: branch.id,
        branchName: branch.name,
        period: period,
        orders: orderCount,
        revenue: totalRevenue,
        averageOrder: averageOrder,
        dailyAverage: dailyAverage,
        startDate: startDate,
        endDate: endDate
      });
    }

    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: 'ƒ∞statistik verisi getirilemedi' });
  }
});

// Eski resimleri temizle endpoint'i
app.post('/api/admin/cleanup-images', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const fs = require('fs');
    const uploadsDir = path.join(__dirname, 'uploads');
    
    // Uploads klas√∂r√º var mƒ± kontrol et
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    // T√ºm √ºr√ºnleri getir
    const products = await prisma.product.findMany({
      select: { image: true }
    });
    
    // Veritabanƒ±ndaki resim yollarƒ±nƒ± topla
    const dbImages = products.map(p => p.image).filter(img => img);
    
    // Uploads klas√∂r√ºndeki dosyalarƒ± listele
    const files = fs.readdirSync(uploadsDir);
    
    // Kullanƒ±lmayan dosyalarƒ± sil
    let deletedCount = 0;
    for (const file of files) {
      const filePath = `/uploads/${file}`;
      if (!dbImages.includes(filePath)) {
        fs.unlinkSync(path.join(uploadsDir, file));
        deletedCount++;
        console.log('Silinen dosya:', file);
      }
    }
    
    res.json({ 
      message: `${deletedCount} kullanƒ±lmayan dosya silindi`,
      deletedCount,
      totalFiles: files.length,
      dbImages: dbImages.length
    });
  } catch (error) {
    console.error('Resim temizleme hatasƒ±:', error);
    res.status(500).json({ error: 'Resim temizlenemedi' });
  }
});

// Render i√ßin resim durumu kontrol endpoint'i
app.get('/api/admin/image-status', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    const fs = require('fs');
    const uploadsDir = path.join(__dirname, 'uploads');
    
    // T√ºm √ºr√ºnleri getir
    const products = await prisma.product.findMany({
      select: { id: true, name: true, image: true }
    });
    
    // Her √ºr√ºn i√ßin resim durumunu kontrol et
    const imageStatus = products.map(product => {
      if (!product.image) {
        return {
          id: product.id,
          name: product.name,
          hasImage: false,
          imagePath: null,
          fileExists: false
        };
      }
      
      const filename = product.image.replace('/uploads/', '');
      const filePath = path.join(uploadsDir, filename);
      const fileExists = fs.existsSync(filePath);
      
      return {
        id: product.id,
        name: product.name,
        hasImage: true,
        imagePath: product.image,
        fileExists: fileExists
      };
    });
    
    const missingImages = imageStatus.filter(item => item.hasImage && !item.fileExists);
    const totalProducts = imageStatus.length;
    const productsWithImages = imageStatus.filter(item => item.hasImage).length;
    const existingImages = imageStatus.filter(item => item.hasImage && item.fileExists).length;
    
    res.json({
      totalProducts,
      productsWithImages,
      existingImages,
      missingImages: missingImages.length,
      details: imageStatus,
      message: `Toplam ${totalProducts} √ºr√ºn, ${productsWithImages} tanesi resimli, ${existingImages} resim mevcut, ${missingImages.length} resim eksik`
    });
  } catch (error) {
    console.error('Resim durumu kontrol hatasƒ±:', error);
    res.status(500).json({ error: 'Resim durumu kontrol edilemedi' });
  }
});


// Veritabanƒ± ba≈ülatma ve seed logic'i - Render G√ºvenli Versiyon
async function initializeDatabase() {
  try {
    console.log('üîç Veritabanƒ± baƒülantƒ±sƒ± test ediliyor...');
    const isConnected = await testDatabaseConnection();
    
    if (isConnected) {
      // Sadece mevcut verileri g√∂ster, seed data y√ºkleme
      const existingUsers = await prisma.user.count();
      const existingBranches = await prisma.branch.count();
      const existingCategories = await prisma.category.count();
      const existingProducts = await prisma.product.count();
      
      console.log('‚úÖ Ger√ßek veritabanƒ±na baƒülandƒ± - seed data y√ºkleme devre dƒ±≈üƒ±');
      console.log(`üìä Mevcut veriler: ${existingUsers} kullanƒ±cƒ±, ${existingBranches} ≈üube, ${existingCategories} kategori, ${existingProducts} √ºr√ºn`);
    } else {
      console.log('‚ö†Ô∏è Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±sƒ±z');
      console.log('üîß Sadece ger√ßek veritabanƒ± kullanƒ±lƒ±yor - seed data y√ºkleme yok');
    }
  } catch (error) {
    console.error('‚ùå Veritabanƒ± ba≈ülatma hatasƒ±:', error);
    console.log('üîß Sadece ger√ßek veritabanƒ± kullanƒ±lƒ±yor - seed data y√ºkleme yok');
}
}

// Veritabanƒ±nƒ± ba≈ülat
initializeDatabase();

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV,
    version: '2.0.0'
  });
});



// Veritabanƒ± verilerini kontrol etme endpoint'i
app.get('/api/database-status', async (req, res) => {
  try {
    const userCount = await prisma.user.count();
    const branchCount = await prisma.branch.count();
    const categoryCount = await prisma.category.count();
    const productCount = await prisma.product.count();
    const orderCount = await prisma.order.count();
    
    // √ñrnek verileri kontrol et
    const sampleUser = await prisma.user.findFirst();
    const sampleBranch = await prisma.branch.findFirst();
    
    res.json({
      database: isPostgreSQL ? 'PostgreSQL' : 'SQLite',
      counts: {
        users: userCount,
        branches: branchCount,
        categories: categoryCount,
        products: productCount,
        orders: orderCount
      },
      sampleData: {
        user: sampleUser ? { id: sampleUser.id, email: sampleUser.email, name: sampleUser.name } : null,
        branch: sampleBranch ? { id: sampleBranch.id, name: sampleBranch.name } : null
      }
    });
  } catch (error) {
    res.status(500).json({ error: 'Veritabanƒ± durumu kontrol edilemedi', details: error.message });
  }
});

// Ger√ßek verileri listeleme endpoint'i
app.get('/api/real-data', async (req, res) => {
  try {
    const users = await prisma.user.findMany({
      select: { id: true, email: true, name: true, role: true }
    });
    
    const branches = await prisma.branch.findMany({
      select: { id: true, name: true, address: true }
    });
    
    const products = await prisma.product.findMany({
      select: { id: true, name: true, price: true, categoryId: true },
      take: 5
    });
    
    res.json({
      message: 'Ger√ßek veritabanƒ± verileri',
      users: users,
      branches: branches,
      products: products
    });
  } catch (error) {
    res.status(500).json({ error: 'Veriler getirilemedi', details: error.message });
  }
});



// Admin kullanƒ±cƒ±sƒ± olu≈üturma endpoint'i
app.post('/api/admin/create-admin', async (req, res) => {
  try {
    // √ñnce admin kullanƒ±cƒ±sƒ±nƒ±n var olup olmadƒ±ƒüƒ±nƒ± kontrol et
    const existingAdmin = await prisma.user.findFirst({
      where: { email: 'admin@example.com' }
    });
    
    if (existingAdmin) {
      return res.json({ 
        message: 'Admin kullanƒ±cƒ±sƒ± zaten mevcut',
        user: {
          id: existingAdmin.id,
          email: existingAdmin.email,
          name: existingAdmin.name,
          role: existingAdmin.role
        }
      });
    }
    
    // Admin kullanƒ±cƒ±sƒ±nƒ± olu≈ütur
    const hashedPassword = await bcrypt.hash('admin123', 10);
    const adminUser = await prisma.user.create({
      data: {
        email: 'admin@example.com',
        password: hashedPassword,
        name: 'S√ºper Admin',
        role: 'SUPER_ADMIN',
        isActive: true
      }
    });
    
    res.json({ 
      message: 'Admin kullanƒ±cƒ±sƒ± ba≈üarƒ±yla olu≈üturuldu',
      user: {
        id: adminUser.id,
        email: adminUser.email,
        name: adminUser.name,
        role: adminUser.role
      }
    });
  } catch (error) {
    res.status(500).json({ error: 'Admin kullanƒ±cƒ±sƒ± olu≈üturulamadƒ±', details: error.message });
  }
});



// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

app.get('/', (req, res) => {
  res.json({ 
    message: 'Fast Food Sales API',
    version: '2.0.0',
    environment: process.env.NODE_ENV,
    features: [
      'Rate Limiting',
      'Security Headers',
      'Compression',
      'Logging',
      'Error Handling'
    ],
    endpoints: {
      health: 'GET /health',
      auth: {
        register: 'POST /api/auth/register',
        login: 'POST /api/auth/login'
      },
      branches: 'GET /api/branches',
      products: 'GET /api/products/:branchId',
      orders: 'POST /api/orders',
      admin: {
        orders: 'GET /api/admin/orders',
        updateOrderStatus: 'PUT /api/admin/orders/:id/status',
        users: 'GET /api/admin/users',
        products: 'GET /api/admin/products',
        categories: 'GET /api/admin/categories',
        branches: 'GET /api/admin/branches'
      }
    }
  });
});

app.use((err, req, res, next) => {
  console.error('Global error handler:', err);
  res.status(500).json({
    error: 'Sunucu hatasƒ±',
    details: err.message,
    stack: err.stack
  });
});

// Admin: Kullanƒ±cƒ± aktivasyonu
app.put('/api/admin/users/:id/activate', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }
    
    const { id } = req.params;
    
    // Kullanƒ±cƒ± var mƒ± kontrol et
    const user = await prisma.user.findUnique({
      where: { id: parseInt(id) }
    });
    
    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }
    
    // Kullanƒ±cƒ±yƒ± aktif hale getir
    await prisma.user.update({
      where: { id: parseInt(id) },
      data: { isActive: true }
    });
    
    res.json({ message: 'Kullanƒ±cƒ± ba≈üarƒ±yla aktifle≈ütirildi' });
  } catch (error) {
    console.error('Kullanƒ±cƒ± aktivasyon hatasƒ±:', error);
    res.status(500).json({ error: 'Kullanƒ±cƒ± aktivasyonu ba≈üarƒ±sƒ±z' });
  }
});

// Veritabanƒ± kolonu ekleme endpoint'i (sadece production'da)
app.post('/api/admin/fix-database', async (req, res) => {
  try {
    console.log('üîÑ Veritabanƒ± d√ºzeltme i≈ülemi ba≈ülatƒ±lƒ±yor...');
    
    // order_items tablosuna note kolonu ekle
    await prisma.$executeRaw`ALTER TABLE order_items ADD COLUMN IF NOT EXISTS note TEXT`;
    
    console.log('‚úÖ Note kolonu ba≈üarƒ±yla eklendi!');
    
    // Kolonun eklendiƒüini doƒürula
    const result = await prisma.$queryRaw`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'order_items' AND column_name = 'note'
    `;
    
    console.log('üìä Kolon bilgisi:', result);
    
    res.json({ 
      success: true, 
      message: 'Veritabanƒ± d√ºzeltildi',
      columnInfo: result 
    });
    
  } catch (error) {
    console.error('‚ùå Veritabanƒ± d√ºzeltme hatasƒ±:', error);
    res.status(500).json({ 
      error: 'Veritabanƒ± d√ºzeltilemedi',
      details: error.message 
    });
  }
}); 

// √úr√ºn resmi d√∂nd√ºren endpoint - Ge√ßici olarak her zaman placeholder d√∂nd√ºr√ºr
app.get('/api/products/:id/image', async (req, res) => {
  try {
    console.log('üñºÔ∏è GET /api/products/:id/image √ßaƒürƒ±ldƒ± - Placeholder d√∂nd√ºr√ºl√ºyor');
    
    // Ge√ßici olarak her zaman placeholder SVG d√∂nd√ºr
    res.set('Content-Type', 'image/svg+xml');
    return res.status(200).send(getPlaceholderSvg());
    
    /* Eski kod - ≈üimdilik devre dƒ±≈üƒ±
    const product = await prisma.product.findUnique({ where: { id: parseInt(req.params.id) } });
    if (!product || !product.image) {
      // Placeholder SVG d√∂nd√ºr
      res.set('Content-Type', 'image/svg+xml');
      return res.status(200).send(getPlaceholderSvg());
    }
    
    const filePath = path.join(__dirname, product.image);
    if (!require('fs').existsSync(filePath)) {
      // Dosya yoksa placeholder SVG d√∂nd√ºr
      res.set('Content-Type', 'image/svg+xml');
      return res.status(200).send(getPlaceholderSvg());
    }
    
    res.set('Content-Type', 'image/png');
    res.sendFile(filePath, (err) => {
      if (err) {
        // Hata durumunda placeholder SVG d√∂nd√ºr
        res.set('Content-Type', 'image/svg+xml');
        res.status(200).send(getPlaceholderSvg());
      }
    });
    */
  } catch (error) {
    // Hata durumunda placeholder SVG d√∂nd√ºr
    res.set('Content-Type', 'image/svg+xml');
    res.status(200).send(getPlaceholderSvg());
  }
});



// üö® URGENT: Resim d√ºzeltme endpoint'i
app.post('/api/admin/fix-images', async (req, res) => {
  try {
    console.log('üö® POST /api/admin/fix-images √ßaƒürƒ±ldƒ± - URGENT FIX');
    
    // G√ºzel bir placeholder SVG resim
    const placeholderImage = `data:image/svg+xml;base64,${Buffer.from(`
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
        </linearGradient>
    </defs>
    <rect width="400" height="300" fill="url(#grad1)"/>
    <rect x="50" y="50" width="300" height="200" fill="rgba(255,255,255,0.9)" stroke="#e5e7eb" stroke-width="2" rx="10"/>
    <circle cx="200" cy="150" r="50" fill="#fbbf24"/>
    <path d="M180 130 L220 150 L180 170 Z" fill="#f59e0b"/>
    <text x="200" y="220" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#374151">Resim Y√ºkleniyor</text>
    <text x="200" y="240" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6b7280">L√ºtfen bekleyin...</text>
</svg>
`).toString('base64')}`;

    // T√ºm √ºr√ºnleri al
    const products = await prisma.product.findMany({
      select: {
        id: true,
        name: true,
        image: true
      }
    });

    console.log(`üìä ${products.length} √ºr√ºn bulundu`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const product of products) {
      try {
        // T√ºm resim sorunlarƒ±nƒ± d√ºzelt
        const needsUpdate = !product.image || 
                           product.image.includes('FILE_NOT_FOUND') || 
                           product.image.includes('uploads/') ||
                           product.image.includes('/opt/render/') ||
                           product.image.length < 100 ||
                           product.image.includes('Resim Yok');

        if (needsUpdate) {
          await prisma.product.update({
            where: { id: product.id },
            data: { image: placeholderImage }
          });
          
          console.log(`‚úÖ ${product.name} -> G√ºzel placeholder resim eklendi`);
          updatedCount++;
        } else {
          console.log(`‚è≠Ô∏è  ${product.name} -> Zaten iyi durumda`);
        }
      } catch (error) {
        console.log(`‚ùå ${product.name} -> Hata: ${error.message}`);
        errorCount++;
      }
    }

    console.log('üéâ PRODUCTION IMAGE FIX TAMAMLANDI!');
    console.log(`‚úÖ G√ºncellenen √ºr√ºn: ${updatedCount}`);
    console.log(`‚ùå Hatalƒ±: ${errorCount}`);

    res.json({
      success: true,
      message: 'Resim sorunlarƒ± d√ºzeltildi!',
      updatedCount: updatedCount,
      errorCount: errorCount,
      totalProducts: products.length
    });

  } catch (error) {
    console.error('‚ùå Resim d√ºzeltme hatasƒ±:', error);
    res.status(500).json({ 
      error: 'Resim d√ºzeltilemedi',
      details: error.message 
    });
  }
});

// ƒ∞lk upload endpoint'i kaldƒ±rƒ±ldƒ± - √ßakƒ±≈üma √∂nlendi

// Eski dosya tabanlƒ± endpoint'ler kaldƒ±rƒ±ldƒ± - Base64 veritabanƒ± sistemi kullanƒ±lƒ±yor

// ƒ∞ki taraflƒ± resim senkronizasyon endpoint'i
app.post('/api/admin/sync-images', authenticateToken, async (req, res) => {
  try {
    console.log('üîÑ Resim senkronizasyonu ba≈ülatƒ±lƒ±yor...');
    
    // Local dosyalarƒ± kontrol et
    const uploadDir = path.join(__dirname, 'uploads', 'products');
    const localFiles = fs.existsSync(uploadDir) ? fs.readdirSync(uploadDir) : [];
    
    console.log('üìÅ Local dosyalar:', localFiles);
    
    // Veritabanƒ±ndan resimleri al
    const dbImages = await prisma.image.findMany({
      select: {
        id: true,
        filename: true,
        dataUrl: true,
        size: true,
        createdAt: true
      }
    });
    
    console.log('üóÑÔ∏è Veritabanƒ± resimleri:', dbImages.length);
    
    // Senkronizasyon raporu
    const syncReport = {
      localFiles: localFiles.length,
      dbImages: dbImages.length,
      synced: 0,
      errors: []
    };
    
    // Local dosyalarƒ± veritabanƒ±na ekle (yoksa)
    for (const filename of localFiles) {
      try {
        const filePath = path.join(uploadDir, filename);
        const stats = fs.statSync(filePath);
        
        // Dosyayƒ± base64'e √ßevir
        const fileBuffer = fs.readFileSync(filePath);
        const base64String = fileBuffer.toString('base64');
        
        // MIME type belirle
        const ext = path.extname(filename).toLowerCase();
        let mimeType = 'image/png';
        if (ext === '.jpg' || ext === '.jpeg') mimeType = 'image/jpeg';
        else if (ext === '.gif') mimeType = 'image/gif';
        else if (ext === '.webp') mimeType = 'image/webp';
        
        const dataUrl = `data:${mimeType};base64,${base64String}`;
        
        // Veritabanƒ±nda var mƒ± kontrol et
        const existingImage = await prisma.image.findFirst({
          where: { filename }
        });
        
        if (!existingImage) {
          // Veritabanƒ±na ekle
          await prisma.image.create({
            data: {
              filename,
              originalName: filename,
              mimeType,
              size: stats.size,
              dataUrl,
              uploadedBy: req.user.userId
            }
          });
          
          syncReport.synced++;
          console.log('‚úÖ Local dosya veritabanƒ±na eklendi:', filename);
        }
      } catch (error) {
        console.error('‚ùå Dosya i≈üleme hatasƒ±:', filename, error);
        syncReport.errors.push(`${filename}: ${error.message}`);
      }
    }
    
    console.log('‚úÖ Senkronizasyon tamamlandƒ±:', syncReport);
    
    res.json({
      message: 'Resim senkronizasyonu tamamlandƒ±',
      report: syncReport
    });
    
  } catch (error) {
    console.error('‚ùå Senkronizasyon hatasƒ±:', error);
    res.status(500).json({ error: 'Senkronizasyon hatasƒ±: ' + error.message });
  }
});

// E-ticaret entegrasyonu router'ƒ±nƒ± ekle
const ecommerceIntegrationRouter = require('./integrations/api');
app.use('/api/integrations', ecommerceIntegrationRouter);

// Chatbot router'ƒ±nƒ± ekle
app.use('/api/chatbot', chatbotRouter);
app.use('/api/chatbot', aiChatbotRouter);
app.use('/api', dashboardRouter);

// Yedekleme router'ƒ±nƒ± ekle
app.use('/api/backup', backupRouter);

// Admin backup endpoint'leri
app.get('/api/admin/backup/stats', authenticateToken, async (req, res) => {
  try {
    const backupSystem = require('./backup-system');
    const stats = backupSystem.getBackupStatus();
    res.json(stats);
  } catch (error) {
    console.error('Backup stats hatasƒ±:', error);
    res.status(500).json({ error: 'Backup istatistikleri alƒ±namadƒ±' });
  }
});

app.get('/api/admin/backup/list', authenticateToken, async (req, res) => {
  try {
    const backupSystem = require('./backup-system');
    const backupList = backupSystem.getBackupList();
    res.json(backupList);
  } catch (error) {
    console.error('Backup list hatasƒ±:', error);
    res.status(500).json({ error: 'Backup listesi alƒ±namadƒ±' });
  }
});

app.post('/api/admin/backup/create', authenticateToken, async (req, res) => {
  try {
    const backupSystem = require('./backup-system');
    const backupFile = await backupSystem.triggerManualBackup();
    res.json({ 
      success: true, 
      message: 'Yedekleme ba≈üarƒ±yla olu≈üturuldu',
      filename: require('path').basename(backupFile)
    });
  } catch (error) {
    console.error('Backup olu≈üturma hatasƒ±:', error);
    res.status(500).json({ error: 'Yedekleme olu≈üturulamadƒ±' });
  }
});

app.get('/api/admin/backup/download/:filename', authenticateToken, async (req, res) => {
  try {
    const { filename } = req.params;
    const backupSystem = require('./backup-system');
    const backupPath = require('path').join(backupSystem.backupDir, filename);
    
    if (!require('fs').existsSync(backupPath)) {
      return res.status(404).json({ error: 'Yedek dosyasƒ± bulunamadƒ±' });
    }
    
    res.download(backupPath, filename);
  } catch (error) {
    console.error('Backup indirme hatasƒ±:', error);
    res.status(500).json({ error: 'Yedek dosyasƒ± indirilemedi' });
  }
});



// 404 handler - En sona ta≈üƒ±ndƒ±

// Port √ßakƒ±≈ümasƒ± kontrol√º ve alternatif port deneme
const startServer = (port) => {
  return new Promise((resolve, reject) => {
    const server = app.listen(port, () => {
      console.log(`üöÄ Server ${port} portunda √ßalƒ±≈üƒ±yor`);
      console.log(`üåç Environment: ${isProduction ? 'Production' : 'Development'}`);
      console.log(`üîó Frontend URL: ${FRONTEND_URL}`);
      resolve(server);
    }).on('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        console.log(`‚ö†Ô∏è Port ${port} kullanƒ±mda, alternatif port deneniyor...`);
        reject(err);
      } else {
        console.error('‚ùå Server ba≈ülatma hatasƒ±:', err);
        reject(err);
      }
    });
  });
};

// SABƒ∞T PORT - Sadece SERVER_PORT kullan
const ports = [SERVER_PORT];
let server = null;

const tryStartServer = async () => {
  // Upload dizinlerini olu≈ütur
  try {
    const uploadsDir = path.join(__dirname, 'uploads');
    const productsDir = path.join(uploadsDir, 'products');
    
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
      console.log('üìÅ Uploads dizini olu≈üturuldu:', uploadsDir);
    }
    
    if (!fs.existsSync(productsDir)) {
      fs.mkdirSync(productsDir, { recursive: true });
      console.log('üìÅ Products dizini olu≈üturuldu:', productsDir);
    }
  } catch (error) {
    console.error('‚ùå Upload dizinleri olu≈üturulamadƒ±:', error);
  }

  // Sadece sabit portu dene
  try {
    server = await startServer(SERVER_PORT);
    console.log(`üöÄ Server ${SERVER_PORT} portunda √ßalƒ±≈üƒ±yor`);
  } catch (err) {
    if (err.code === 'EADDRINUSE') {
      console.error(`‚ùå Port ${SERVER_PORT} kullanƒ±mda. L√ºtfen portu serbest bƒ±rakƒ±n.`);
      console.error('üí° √á√∂z√ºm: taskkill /F /IM node.exe komutunu √ßalƒ±≈ütƒ±rƒ±n');
      process.exit(1);
    } else {
      throw err;
    }
  }
};

tryStartServer();

// Socket.IO konfig√ºrasyonu - server hazƒ±r olduƒüunda
let io = null; // Global io objesi

const setupSocketIO = () => {
  if (server) {
    try {
      io = configureSocket(server);
      console.log('üîå Socket.IO konfig√ºrasyonu tamamlandƒ±');
      
      // Socket.IO baƒülantƒ± durumu izleme
      io.engine.on('connection_error', (err) => {
        console.error('üîå Socket.IO baƒülantƒ± hatasƒ±:', err);
      });
      
      // Server kapatma i≈ülemi
      process.on('SIGTERM', () => {
        console.log('üîÑ Server kapatƒ±lƒ±yor...');
        if (io) {
          io.close();
        }
        process.exit(0);
      });
      
    } catch (error) {
      console.error('‚ùå Socket.IO kurulum hatasƒ±:', error);
    }
  }
};

// Server ba≈ülatƒ±ldƒ±ktan sonra Socket.IO'yu kur
setTimeout(setupSocketIO, 1000);

// Otomatik temizlik ba≈ülat
setTimeout(() => {
  console.log('üßπ Otomatik temizlik sistemi ba≈ülatƒ±lƒ±yor...');
  startAutoCleanup();
}, 2000);

// Yedekleme sistemi ba≈ülat
setTimeout(() => {
  console.log('üíæ Otomatik yedekleme sistemi ba≈ülatƒ±lƒ±yor...');
  const backupSystem = require('./backup-system');
  backupSystem.scheduleBackups();
}, 3000);

// Admin temizlik endpoint'leri
app.post('/api/admin/cleanup-orders', authenticateToken, async (req, res) => {
  try {
    // Sadece SUPER_ADMIN ve BRANCH_MANAGER eri≈üebilir
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    console.log('üßπ Manuel temizlik isteƒüi alƒ±ndƒ±');
    
    // Temizlik i≈ülemini √ßalƒ±≈ütƒ±r
    await cleanupOldOrders();
    
    // ƒ∞statistikleri al
    await showDatabaseStats();
    
    res.json({ 
      message: 'Eski sipari≈üler ba≈üarƒ±yla temizlendi',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Temizlik hatasƒ±:', error);
    res.status(500).json({ error: 'Temizlik i≈ülemi ba≈üarƒ±sƒ±z' });
  }
});

// T√ºm sipari≈üleri silme endpoint'i
app.delete('/api/admin/orders', authenticateToken, async (req, res) => {
  try {
    // Sadece SUPER_ADMIN eri≈üebilir
    if (req.user.role !== 'SUPER_ADMIN') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim. Sadece s√ºper admin t√ºm sipari≈üleri silebilir.' });
    }

    console.log('üóëÔ∏è T√ºm sipari≈üleri silme isteƒüi alƒ±ndƒ±');
    
    // √ñnce toplam sipari≈ü sayƒ±sƒ±nƒ± al
    const totalOrders = await prisma.order.count();
    const totalOrderItems = await prisma.orderItem.count();
    
    if (totalOrders === 0) {
      return res.json({ 
        message: 'Silinecek sipari≈ü bulunmuyor',
        deletedOrders: 0,
        deletedOrderItems: 0,
        timestamp: new Date().toISOString()
      });
    }

    console.log(`üìä Silinecek sipari≈ü sayƒ±sƒ±: ${totalOrders}`);
    console.log(`üìä Silinecek orderItems sayƒ±sƒ±: ${totalOrderItems}`);

    // Transaction ile g√ºvenli silme i≈ülemi
    const result = await prisma.$transaction(async (tx) => {
      // √ñnce orderItems'larƒ± sil
      const deletedOrderItems = await tx.orderItem.deleteMany({});
      console.log(`üóëÔ∏è Silinen orderItems sayƒ±sƒ±: ${deletedOrderItems.count}`);

      // Sonra sipari≈üleri sil
      const deletedOrders = await tx.order.deleteMany({});
      console.log(`üóëÔ∏è Silinen sipari≈ü sayƒ±sƒ±: ${deletedOrders.count}`);

      return {
        deletedOrders: deletedOrders.count,
        deletedOrderItems: deletedOrderItems.count
      };
    });

    console.log('‚úÖ T√ºm sipari≈üler ba≈üarƒ±yla silindi!');
    console.log(`üìä Toplam silinen sipari≈ü: ${result.deletedOrders}`);
    console.log(`üìä Toplam silinen orderItems: ${result.deletedOrderItems}`);

    res.json({ 
      message: 'T√ºm sipari≈üler ba≈üarƒ±yla silindi',
      deletedOrders: result.deletedOrders,
      deletedOrderItems: result.deletedOrderItems,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå T√ºm sipari≈üleri silme hatasƒ±:', error);
    res.status(500).json({ error: 'Sipari≈üler silinirken bir hata olu≈ütu' });
  }
});

app.get('/api/admin/database-stats', authenticateToken, async (req, res) => {
  try {
    // SUPER_ADMIN, ADMIN ve BRANCH_MANAGER eri≈üebilir
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'ADMIN' && req.user.role !== 'admin' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    console.log('üìä Veritabanƒ± istatistikleri isteƒüi alƒ±ndƒ±');
    
    // ƒ∞statistikleri al
    const totalOrders = await prisma.order.count();
    const oldOrders = await prisma.order.count({
      where: {
        createdAt: {
          lt: new Date(Date.now() - 12 * 60 * 60 * 1000)
        }
      }
    });
    
    const activeOrders = await prisma.order.count({
      where: {
        status: {
          in: ['PENDING', 'PREPARING', 'READY']
        }
      }
    });

    const completedOrders = await prisma.order.count({
      where: {
        status: {
          in: ['DELIVERED', 'CANCELLED']
        }
      }
    });

    // Bellek kullanƒ±mƒ±
    const memUsage = process.memoryUsage();
    
    res.json({
      stats: {
        totalOrders,
        oldOrders,
        activeOrders,
        completedOrders
      },
      memory: {
        rss: Math.round(memUsage.rss / 1024 / 1024),
        heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
        heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024)
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå ƒ∞statistik hatasƒ±:', error);
    res.status(500).json({ error: 'ƒ∞statistikler alƒ±namadƒ±' });
  }
});

app.post('/api/admin/reset-super-admin', async (req, res) => {
  try {
    console.log('üîÑ S√ºper admin hesabƒ± sƒ±fƒ±rlanƒ±yor...');
    
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    // S√ºper admin hesabƒ±nƒ± g√ºncelle veya olu≈ütur
    const superAdmin = await prisma.user.upsert({
      where: { email: 'admin@example.com' },
      update: {
        password: hashedPassword,
        name: 'S√ºper Admin',
        role: 'SUPER_ADMIN',
        isActive: true,
        isApproved: true
      },
      create: {
        email: 'admin@example.com',
        password: hashedPassword,
        name: 'S√ºper Admin',
        role: 'SUPER_ADMIN',
        isActive: true,
        isApproved: true
      }
    });
    
    console.log('‚úÖ S√ºper admin hesabƒ± ba≈üarƒ±yla sƒ±fƒ±rlandƒ±:', superAdmin.email);
    
    res.json({ 
      message: 'S√ºper admin hesabƒ± ba≈üarƒ±yla sƒ±fƒ±rlandƒ±',
      credentials: {
        email: 'admin@example.com',
        password: 'admin123'
      }
    });
  } catch (error) {
    console.error('‚ùå S√ºper admin sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: 'S√ºper admin hesabƒ± sƒ±fƒ±rlanamadƒ±: ' + error.message });
  }
});

app.post('/api/admin/reset-manager', async (req, res) => {
  try {
    console.log('üîÑ ≈ûube m√ºd√ºr√º hesabƒ± sƒ±fƒ±rlanƒ±yor...');
    
    const hashedPassword = await bcrypt.hash('manager123', 10);
    
    // ≈ûube m√ºd√ºr√º hesabƒ±nƒ± g√ºncelle veya olu≈ütur
    const manager = await prisma.user.upsert({
      where: { email: 'manager@example.com' },
      update: {
        password: hashedPassword,
        name: 'Merkez ≈ûube M√ºd√ºr√º',
        role: 'BRANCH_MANAGER',
        branchId: 1,
        isActive: true,
        isApproved: true
      },
      create: {
        email: 'manager@example.com',
        password: hashedPassword,
        name: 'Merkez ≈ûube M√ºd√ºr√º',
        role: 'BRANCH_MANAGER',
        branchId: 1,
        isActive: true,
        isApproved: true
      }
    });
    
    console.log('‚úÖ ≈ûube m√ºd√ºr√º hesabƒ± ba≈üarƒ±yla sƒ±fƒ±rlandƒ±:', manager.email);
    
    res.json({ 
      message: '≈ûube m√ºd√ºr√º hesabƒ± ba≈üarƒ±yla sƒ±fƒ±rlandƒ±',
      credentials: {
        email: 'manager@example.com',
        password: 'manager123'
      }
    });
  } catch (error) {
    console.error('‚ùå ≈ûube m√ºd√ºr√º sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: '≈ûube m√ºd√ºr√º hesabƒ± sƒ±fƒ±rlanamadƒ±: ' + error.message });
  }
});

// ===== FIRMA Y√ñNETƒ∞Mƒ∞ API ENDPOINT'LERƒ∞ =====

// Firma olu≈üturma
// app.post('/api/companies', companyManagement.createCompany);

// Firma listesi
// app.get('/api/companies', companyManagement.getCompanies);

// Firma detayƒ±
// app.get('/api/companies/:id', companyManagement.getCompany);

// Firma g√ºncelleme
// app.put('/api/companies/:id', companyManagement.updateCompany);

// Firma silme
// app.delete('/api/companies/:id', companyManagement.deleteCompany);

// Firma istatistikleri
// app.get('/api/companies/:id/stats', companyManagement.getCompanyStats);

// === COMPANY MANAGEMENT ENDPOINTS ===

app.post('/api/companies', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'SUPER_ADMIN') return res.status(403).json({ error: 'Yetkisiz' });
    const { name, domain, logo, address, phone, email } = req.body;
    if (!name || !domain) return res.status(400).json({ error: 'Firma adƒ± ve domain zorunludur.' });
    const existing = await prisma.company.findUnique({ where: { domain } });
    if (existing) return res.status(400).json({ error: 'Bu domain zaten kayƒ±tlƒ±.' });
    const company = await prisma.company.create({
      data: { name, domain, logo: logo || '', address: address || '', phone: phone || '', email: email || '' }
    });
    res.status(201).json(company);
  } catch (e) {
    console.error('Firma ekleme hatasƒ±:', e);
    res.status(500).json({ error: 'Firma eklenemedi' });
  }
});

// ===== MASA TAHSƒ∞LAT API ENDPOINT'LERƒ∞ =====

// Aktif masalarƒ± getir
app.get('/api/admin/tables/active', authenticateToken, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      include: { branch: true }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    let whereClause = {
      isActive: true
    };
    
    if (user.role === 'BRANCH_MANAGER') {
      whereClause.branchId = user.branchId;
    }

    const tables = await prisma.table.findMany({
      where: whereClause,
      include: {
        branch: true,
        orders: {
          where: {
            status: { not: 'DELIVERED' },
            orderType: 'TABLE'
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            }
          }
        }
      },
      orderBy: { number: 'asc' }
    });

    // Her masa i√ßin toplam tutarƒ± hesapla
    const tablesWithTotal = tables.map(table => {
      const totalAmount = table.orders.reduce((sum, order) => {
        return sum + order.orderItems.reduce((orderSum, item) => {
          return orderSum + (item.price * item.quantity);
        }, 0);
      }, 0);

      return {
        ...table,
        totalAmount,
        orderCount: table.orders.length
      };
    });

    res.json(tablesWithTotal);
  } catch (error) {
    console.error('Aktif masalar getirilemedi:', error);
    res.status(500).json({ error: 'Masalar getirilemedi' });
  }
});

// Masa sipari≈ülerini getir (Admin i√ßin)
app.get('/api/admin/tables/:tableId/orders', authenticateToken, async (req, res) => {
  try {
    const { tableId } = req.params;
    
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      include: { branch: true }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true,
        orders: {
          where: {
            status: { not: 'DELIVERED' },
            orderType: 'TABLE'
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            }
          }
        }
      }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    // Toplam tutarƒ± hesapla
    const totalAmount = table.orders.reduce((sum, order) => {
      return sum + order.orderItems.reduce((orderSum, item) => {
        return orderSum + (item.price * item.quantity);
      }, 0);
    }, 0);

    res.json({
      table,
      orders: table.orders,
      totalAmount,
      orderCount: table.orders.length
    });
  } catch (error) {
    console.error('Masa sipari≈üleri getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈üler getirilemedi' });
  }
});

// Masa sipari≈ülerini getir (M√º≈üteri i√ßin - authentication gerektirmez)
app.get('/api/table/:tableId/orders', async (req, res) => {
  try {
    const { tableId } = req.params;
    
    console.log('üîç M√º≈üteri masa sipari≈üleri isteƒüi, tableId:', tableId);

    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        branch: true,
        orders: {
          where: {
            orderType: 'TABLE',
            status: { in: ['PENDING', 'PREPARING', 'READY'] } // Teslim edilmi≈ü sipari≈üleri gizle
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            }
          },
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!table) {
      console.log('‚ùå Masa bulunamadƒ±, tableId:', tableId);
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (!table.isActive) {
      console.log('‚ùå Masa aktif deƒüil, tableId:', tableId);
      return res.status(400).json({ error: 'Bu masa aktif deƒüil' });
    }

    console.log('‚úÖ Masa bulundu, sipari≈ü sayƒ±sƒ±:', table.orders.length);

    // Toplam tutarƒ± hesapla
    const totalAmount = table.orders.reduce((sum, order) => {
      return sum + order.orderItems.reduce((orderSum, item) => {
        return orderSum + (item.price * item.quantity);
      }, 0);
    }, 0);

    res.json({
      table,
      orders: table.orders,
      totalAmount,
      orderCount: table.orders.length
    });
  } catch (error) {
    console.error('‚ùå M√º≈üteri masa sipari≈üleri getirilemedi:', error);
    res.status(500).json({ error: 'Sipari≈üler getirilemedi' });
  }
});

// Masa tahsilatƒ± yap
app.post('/api/admin/tables/:tableId/collect', authenticateToken, async (req, res) => {
  try {
    const { tableId } = req.params;
    const { paymentMethod, amount } = req.body;
    
    if (!paymentMethod || !amount) {
      return res.status(400).json({ error: '√ñdeme y√∂ntemi ve tutar zorunludur' });
    }

    const user = await prisma.user.findUnique({
      where: { id: req.user.userId }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    // Masayƒ± ve sipari≈ülerini getir
    const table = await prisma.table.findUnique({
      where: { id: parseInt(tableId) },
      include: {
        orders: {
          where: {
            status: { not: 'DELIVERED' },
            orderType: 'TABLE'
          }
        }
      }
    });

    if (!table) {
      return res.status(404).json({ error: 'Masa bulunamadƒ±' });
    }

    if (table.orders.length === 0) {
      return res.status(400).json({ error: 'Bu masada tahsilat yapƒ±lacak sipari≈ü bulunmuyor' });
    }

    // Tahsilat kaydƒ± olu≈ütur
    const payment = await prisma.tablePayment.create({
      data: {
        tableId: parseInt(tableId),
        amount: parseFloat(amount),
        paymentMethod,
        userId: user.id
      }
    });

    // Sipari≈üleri teslim edildi olarak i≈üaretle
    await prisma.order.updateMany({
      where: {
        tableId: parseInt(tableId),
        status: { not: 'DELIVERED' },
        orderType: 'TABLE'
      },
      data: {
        status: 'DELIVERED'
      }
    });

    // Masayƒ± sƒ±fƒ±rla
    await prisma.table.update({
      where: { id: parseInt(tableId) },
      data: {
        status: 'EMPTY',
        totalAmount: 0
      }
    });

    res.json({
      message: 'Tahsilat ba≈üarƒ±yla tamamlandƒ±',
      payment,
      tableId: parseInt(tableId)
    });
  } catch (error) {
    console.error('Tahsilat hatasƒ±:', error);
    res.status(500).json({ error: 'Tahsilat yapƒ±lamadƒ±' });
  }
});

// Masa sƒ±fƒ±rlama
app.post('/api/admin/tables/:tableId/reset', authenticateToken, async (req, res) => {
  try {
    const { tableId } = req.params;
    
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId }
    });

    if (!user) {
      return res.status(404).json({ error: 'Kullanƒ±cƒ± bulunamadƒ±' });
    }

    // Masayƒ± sƒ±fƒ±rla
    await prisma.table.update({
      where: { id: parseInt(tableId) },
      data: {
        status: 'EMPTY',
        totalAmount: 0
      }
    });

    // Sipari≈üleri teslim edildi olarak i≈üaretle
    await prisma.order.updateMany({
      where: {
        tableId: parseInt(tableId),
        status: { not: 'DELIVERED' },
        orderType: 'TABLE'
      },
      data: {
        status: 'DELIVERED'
      }
    });

    res.json({
      message: 'Masa ba≈üarƒ±yla sƒ±fƒ±rlandƒ±',
      tableId: parseInt(tableId)
    });
  } catch (error) {
    console.error('Masa sƒ±fƒ±rlama hatasƒ±:', error);
    res.status(500).json({ error: 'Masa sƒ±fƒ±rlanamadƒ±' });
  }
});

// Resim y√ºkleme endpoint'i - Base64 formatƒ±nda veritabanƒ±na kaydet (TEST MODE - NO AUTH)
app.post('/api/admin/upload-image', upload.single('image'), async (req, res) => {
  try {
    console.log('üîç POST /api/admin/upload-image √ßaƒürƒ±ldƒ± - v9 - BASE64 DATABASE');
    console.log('üîç Request body:', req.body);
    console.log('üîç Request file:', req.file);
    console.log('üîç Request headers:', req.headers);
    
    // CORS ayarlarƒ±
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
    res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
    res.set('Access-Control-Max-Age', '86400');
    res.set('Access-Control-Allow-Credentials', 'false');
    
    // OPTIONS request i√ßin
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }
    
    if (!req.file) {
      console.log('‚ùå Resim dosyasƒ± y√ºklenmedi');
      return res.status(400).json({ error: 'Resim dosyasƒ± y√ºklenmedi' });
    }

    // Dosyayƒ± base64'e √ßevir
    const fileBuffer = fs.readFileSync(req.file.path);
    const base64String = fileBuffer.toString('base64');
    
    // Dosya uzantƒ±sƒ±na g√∂re MIME type belirle
    const ext = path.extname(req.file.filename).toLowerCase();
    let mimeType = 'image/png'; // Varsayƒ±lan
    if (ext === '.jpg' || ext === '.jpeg') mimeType = 'image/jpeg';
    else if (ext === '.gif') mimeType = 'image/gif';
    else if (ext === '.webp') mimeType = 'image/webp';
    
    // Base64 data URL olu≈ütur
    const dataUrl = `data:${mimeType};base64,${base64String}`;
    
    // Veritabanƒ±na kaydet
    const savedImage = await prisma.image.create({
      data: {
        filename: req.file.filename,
        originalName: req.file.originalname,
        mimeType: mimeType,
        size: req.file.size,
        dataUrl: dataUrl,
        uploadedBy: req.user?.userId || null // Authentication yoksa null kullan
      }
    });
    
    // Fiziksel dosyayƒ± sil (veritabanƒ±nda saklandƒ±ƒüƒ± i√ßin)
    fs.unlinkSync(req.file.path);
    
    console.log('‚úÖ Resim base64 formatƒ±nda veritabanƒ±na kaydedildi:', req.file.filename);
    console.log('‚úÖ Veritabanƒ± ID:', savedImage.id);
    console.log('‚úÖ Dosya boyutu:', req.file.size);
    
    res.json({
      message: 'Resim ba≈üarƒ±yla y√ºklendi',
      id: savedImage.id,
      filename: savedImage.filename,
      originalName: savedImage.originalName,
      size: savedImage.size,
      mimeType: savedImage.mimeType
    });
  } catch (error) {
    console.error('‚ùå Resim y√ºkleme hatasƒ±:', error);
    res.status(500).json({ error: 'Resim y√ºklenemedi: ' + error.message });
  }
});

// Resim listesi endpoint'i - Veritabanƒ±ndan base64 formatƒ±nda (TEST MODE - NO AUTH)
app.get('/api/admin/images', async (req, res) => {
  try {
    console.log('üîç GET /api/admin/images √ßaƒürƒ±ldƒ± - v5 - BASE64 DATABASE');
    console.log('üîç User:', req.user);
    console.log('üîç Request headers:', req.headers);
    
    // Veritabanƒ±ndan resimleri al
    const images = await prisma.image.findMany({
      orderBy: {
        createdAt: 'desc'
      },
      select: {
        id: true,
        filename: true,
        originalName: true,
        mimeType: true,
        size: true,
        dataUrl: true,
        createdAt: true,
        uploadedBy: true
      }
    });
    
    console.log('‚úÖ Veritabanƒ±ndan alƒ±nan resim sayƒ±sƒ±:', images.length);
    
    // Base64 data URL'lerini d√∂nd√ºr
    const imageList = images.map(img => ({
      id: img.id,
      filename: img.filename,
      originalName: img.originalName,
      size: img.size,
      type: img.filename.split('.').pop()?.toUpperCase() || 'UNKNOWN',
      uploadedAt: img.createdAt,
      url: img.dataUrl // Base64 data URL
    }));
    
    console.log('‚úÖ Response g√∂nderiliyor:', imageList.length, 'resim');
    
        res.json(imageList);
  } catch (error) {
    console.error('‚ùå Resim listesi hatasƒ±:', error);
    res.status(500).json({ error: 'Resim listesi alƒ±namadƒ±: ' + error.message });
  }
});

// Resim silme endpoint'i - Veritabanƒ±ndan sil
app.delete('/api/admin/images/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log('üîç DELETE /api/admin/images/:id √ßaƒürƒ±ldƒ± - v2 - DATABASE');
    console.log('üîç Resim ID:', id);
    console.log('üîç User:', req.user);
    
    // Veritabanƒ±ndan resmi sil
    const deletedImage = await prisma.image.delete({
      where: {
        id: parseInt(id)
      }
    });
    
    console.log('‚úÖ Resim veritabanƒ±ndan silindi:', deletedImage.filename);
    
    res.json({ 
      message: 'Resim ba≈üarƒ±yla silindi',
      deletedImage: {
        id: deletedImage.id,
        filename: deletedImage.filename
      }
    });
  } catch (error) {
    console.error('‚ùå Resim silme hatasƒ±:', error);
    if (error.code === 'P2025') {
      res.status(404).json({ error: 'Resim bulunamadƒ±' });
    } else {
      res.status(500).json({ error: 'Resim silinemedi: ' + error.message });
    }
  }
});

// Statik dosya servisi
// Uploads klas√∂r√º i√ßin CORS ayarlarƒ±
app.use('/uploads', (req, res, next) => {
  // CORS headers
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, OPTIONS, HEAD');
  res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length');
  res.set('Access-Control-Max-Age', '86400');
  
  // OPTIONS request i√ßin
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
}, express.static(path.join(__dirname, 'uploads')));



// Public endpoint - authentication olmadan (frontend i√ßin)
app.get('/api/admin/images-public', async (req, res) => {
  try {
    console.log('üîç GET /api/admin/images-public √ßaƒürƒ±ldƒ± (public endpoint) - v4 - BASE64 SUPPORT');
    
    // CORS ayarlarƒ±
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
    res.set('Access-Control-Expose-Headers', 'Content-Disposition, Content-Length, Content-Type');
    res.set('Access-Control-Max-Age', '86400');
    res.set('Access-Control-Allow-Credentials', 'false');
    
    // OPTIONS request i√ßin
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }
    
    const uploadDir = path.join(__dirname, 'uploads', 'products');
    console.log('üîç Upload directory:', uploadDir);
    
    if (!fs.existsSync(uploadDir)) {
      console.log('üìÅ Upload directory yok, bo≈ü array d√∂nd√ºr√ºl√ºyor');
      return res.json([]);
    }

    const files = fs.readdirSync(uploadDir);
    console.log('üìÅ Bulunan dosyalar:', files);
    
    const images = files
      .filter(file => {
        try {
          const ext = path.extname(file).toLowerCase();
          const isValid = ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);
          return isValid;
        } catch (error) {
          console.error('Dosya filtresi hatasƒ±:', error);
          return false;
        }
      })
      .map(file => {
        try {
          const filePath = path.join(uploadDir, file);
          const stats = fs.statSync(filePath);
          
          // Dosyayƒ± base64'e √ßevir
          const imageBuffer = fs.readFileSync(filePath);
          const base64Image = `data:image/${path.extname(file).substring(1)};base64,${imageBuffer.toString('base64')}`;
          
          const imageInfo = {
            filename: file,
            path: base64Image, // Base64 data URL olarak d√∂nd√ºr
            size: stats.size,
            uploadedAt: stats.mtime
          };
          console.log('üìÑ Resim bilgisi:', { filename: file, size: stats.size, base64Length: base64Image.length });
          return imageInfo;
        } catch (error) {
          console.error('Dosya bilgisi alma hatasƒ±:', error);
          return null;
        }
      })
      .filter(image => image !== null)
      .sort((a, b) => b.uploadedAt - a.uploadedAt);

    console.log('‚úÖ Toplam resim sayƒ±sƒ±:', images.length);
    res.json(images);
  } catch (error) {
    console.error('‚ùå Public resim listesi hatasƒ±:', error);
    res.status(500).json({ error: 'Resim listesi alƒ±namadƒ±' });
  }
});

// Performans izleme endpoint'i
app.get('/api/admin/performance-stats', authenticateToken, async (req, res) => {
  try {
    // Sadece SUPER_ADMIN ve BRANCH_MANAGER eri≈üebilir
    if (req.user.role !== 'SUPER_ADMIN' && req.user.role !== 'BRANCH_MANAGER') {
      return res.status(403).json({ error: 'Yetkisiz eri≈üim' });
    }

    console.log('üìä Performans istatistikleri isteƒüi alƒ±ndƒ±');
    
    const stats = performanceMonitor.getStats();
    const health = performanceMonitor.getHealthStatus();
    
    res.json({
      performance: stats,
      health: health,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Performans istatistik hatasƒ±:', error);
    res.status(500).json({ error: 'Performans istatistikleri alƒ±namadƒ±' });
  }
});

// 404 handler - En sona eklendi
app.use('*', (req, res) => {
  console.log('‚ùå 404 - Endpoint bulunamadƒ±:', req.method, req.url);
  res.status(404).json({ error: 'Endpoint bulunamadƒ±' });
});

