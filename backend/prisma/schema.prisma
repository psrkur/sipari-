generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int           @id @default(autoincrement())
  email      String
  password   String
  name       String
  phone      String?
  address    String?
  role       String        @default("CUSTOMER")
  branchId   Int?
  isActive   Boolean       @default(false)
  isApproved Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  orders     Order[]
  addresses  UserAddress[]
  tablePayments TablePayment[]
  branch     Branch?       @relation(fields: [branchId], references: [id])

  @@unique([email])
  @@map("users")
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_addresses")
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  isActive  Boolean  @default(true)
  companyId Int      @map("companyId")
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  products  Product[]
  tables    Table[]
  users     User[]

  @@map("branches")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id])

  @@unique([name])
  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  categoryId  Int
  image       String?
  imagePath   String?     // Resim dosya yolu
  isActive    Boolean     @default(true)
  branchId    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  branch      Branch      @relation(fields: [branchId], references: [id])
  category    Category    @relation(fields: [categoryId], references: [id])
  companyId   Int
  company     Company     @relation(fields: [companyId], references: [id])

  @@map("products")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String
  userId      Int?
  branchId    Int
  tableId     Int?
  customerId  Int?
  status      String      @default("PENDING")
  totalAmount Float
  notes       String?
  orderType   String      @default("DELIVERY")
  platform    String?     // E-ticaret platformu (trendyol, getir, yemeksepeti, migros)
  platformOrderId String? // Platform sipariş ID'si
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  branch      Branch      @relation(fields: [branchId], references: [id])
  customer    Customer?   @relation(fields: [customerId], references: [id])
  table       Table?      @relation(fields: [tableId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])

  @@unique([orderNumber])
  @@map("orders")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  chatMessages ChatMessage[]

  @@unique([phone])
  @@map("customers")
}

model Table {
  id        Int      @id @default(autoincrement())
  number    String
  branchId  Int
  isActive  Boolean  @default(true)
  status    String   @default("EMPTY") // EMPTY, OCCUPIED, PAID
  totalAmount Float  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  branch    Branch   @relation(fields: [branchId], references: [id])
  payments  TablePayment[]

  @@unique([number, branchId])
  @@map("tables")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  note      String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  domain    String   @unique
  logo      String?
  address   String?
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branches   Branch[]
  categories Category[]
  products   Product[]
}

model TablePayment {
  id        Int      @id @default(autoincrement())
  tableId   Int
  amount    Float
  paymentMethod String // CASH, CARD
  userId    Int?     // Kasiyer ID
  createdAt DateTime @default(now())
  table     Table    @relation(fields: [tableId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("table_payments")
}

model PlatformConfig {
  id          Int      @id @default(autoincrement())
  platformName String  @unique
  baseUrl     String?
  apiKey      String?
  apiSecret   String?
  isActive    Boolean  @default(false)
  lastSync    DateTime?
  config      Json?    // Ek konfigürasyon bilgileri
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("platform_configs")
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  customerId  Int
  message     String
  platform    String   @default("web") // web, whatsapp, telegram
  direction   String   // incoming, outgoing
  isProcessed Boolean  @default(false)
  responseType String? // order_status_inquiry, menu_inquiry, etc.
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id])

  @@map("chat_messages")
}

model Image {
  id          Int      @id @default(autoincrement())
  filename    String   @unique
  originalName String
  mimeType    String
  size        Int
  dataUrl     String   @db.Text
  uploadedBy  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("images")
}


