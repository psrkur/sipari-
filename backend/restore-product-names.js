const { PrismaClient } = require('@prisma/client');

// Environment variables - Manuel y√ºkleme
require('dotenv').config({ path: require('path').join(__dirname, '.env') });

const DATABASE_URL = 'postgresql://naim:cibKjxXirpnFyQTor7DpBhGXf1XAqmmw@dpg-d1podn2dbo4c73bp2q7g-a.oregon-postgres.render.com/siparis?sslmode=require&connect_timeout=30';

// Prisma client configuration
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: DATABASE_URL
    }
  },
  log: ['error', 'warn']
});

async function restoreProductNames() {
  try {
    console.log('üîß √úr√ºn isimlerini geri y√ºkl√ºyor...\n');

    // 1. Mevcut √ºr√ºnleri kontrol et
    console.log('üìã MEVCUT √úR√úNLER:');
    const products = await prisma.product.findMany({
      include: {
        category: true
      }
    });

    console.log(`Toplam √ºr√ºn sayƒ±sƒ±: ${products.length}`);
    products.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name} - ${product.category.name} - ${product.price}‚Ç∫`);
    });
    console.log('');

    // 2. SalesRecordItem'larƒ± kontrol et
    console.log('üíæ MEVCUT SALES RECORD ITEMS:');
    const salesRecordItems = await prisma.salesRecordItem.findMany({
      include: {
        salesRecord: true
      }
    });

    console.log(`Toplam SalesRecordItem sayƒ±sƒ±: ${salesRecordItems.length}`);
    
    // "Silinmi≈ü Sipari≈ü √úr√ºn√º" olanlarƒ± bul
    const deletedProductItems = salesRecordItems.filter(item => 
      item.productName === 'Silinmi≈ü Sipari≈ü √úr√ºn√º' || 
      item.productName === 'Bilinmeyen √úr√ºn'
    );

    console.log(`D√ºzeltilmesi gereken √ºr√ºn sayƒ±sƒ±: ${deletedProductItems.length}`);
    console.log('');

    if (deletedProductItems.length === 0) {
      console.log('‚úÖ T√ºm √ºr√ºn isimleri zaten doƒüru');
      return;
    }

    // 3. Fiyat ve kategori bazƒ±nda e≈üle≈ütirme yap
    console.log('üîç √úR√úN E≈ûLE≈ûTƒ∞RME:');
    
    for (const item of deletedProductItems) {
      console.log(`\nüîß ${item.salesRecord.orderNumber} sipari≈üi i≈üleniyor...`);
      console.log(`   Mevcut: ${item.productName} - ${item.categoryName} - ${item.price}‚Ç∫`);

      // Fiyat ve kategori bazƒ±nda e≈üle≈ütir
      const matchingProduct = products.find(product => 
        product.price === item.price && 
        product.category.name === item.categoryName
      );

      if (matchingProduct) {
        // √úr√ºn ismini g√ºncelle
        await prisma.salesRecordItem.update({
          where: { id: item.id },
          data: {
            productName: matchingProduct.name,
            categoryName: matchingProduct.category.name,
            productId: matchingProduct.id
          }
        });

        console.log(`   ‚úÖ G√ºncellendi: ${matchingProduct.name} - ${matchingProduct.category.name} - ${matchingProduct.price}‚Ç∫`);
      } else {
        // Fiyat bazƒ±nda e≈üle≈ütir
        const priceMatch = products.find(product => product.price === item.price);
        
        if (priceMatch) {
          await prisma.salesRecordItem.update({
            where: { id: item.id },
            data: {
              productName: priceMatch.name,
              categoryName: priceMatch.category.name,
              productId: priceMatch.id
            }
          });

          console.log(`   ‚úÖ Fiyat e≈üle≈ümesi: ${priceMatch.name} - ${priceMatch.category.name} - ${priceMatch.price}‚Ç∫`);
        } else {
          // En yakƒ±n fiyatlƒ± √ºr√ºn√º bul
          const closestProduct = products.reduce((closest, product) => {
            const diff = Math.abs(product.price - item.price);
            const closestDiff = Math.abs(closest.price - item.price);
            return diff < closestDiff ? product : closest;
          });

          await prisma.salesRecordItem.update({
            where: { id: item.id },
            data: {
              productName: closestProduct.name,
              categoryName: closestProduct.category.name,
              productId: closestProduct.id
            }
          });

          console.log(`   ‚úÖ En yakƒ±n fiyat: ${closestProduct.name} - ${closestProduct.category.name} - ${closestProduct.price}‚Ç∫ (Orijinal: ${item.price}‚Ç∫)`);
        }
      }
    }

    // 4. Sonu√ßlarƒ± kontrol et
    console.log('\nüìä G√úNCELLEME SONU√áLARI:');
    const updatedItems = await prisma.salesRecordItem.findMany({
      include: {
        salesRecord: true
      }
    });

    console.log('G√ºncellenmi≈ü √ºr√ºn satƒ±≈ülarƒ±:');
    updatedItems.forEach((item, index) => {
      console.log(`${index + 1}. ${item.productName} - ${item.categoryName} - ${item.quantity} adet - ${item.price}‚Ç∫ (${item.salesRecord.orderNumber})`);
    });

    // 5. Kategori bazƒ±nda √∂zet
    const categorySummary = {};
    updatedItems.forEach(item => {
      if (!categorySummary[item.categoryName]) {
        categorySummary[item.categoryName] = {
          totalQuantity: 0,
          totalRevenue: 0,
          products: new Set()
        };
      }
      categorySummary[item.categoryName].totalQuantity += item.quantity;
      categorySummary[item.categoryName].totalRevenue += item.totalPrice;
      categorySummary[item.categoryName].products.add(item.productName);
    });

    console.log('\nüìà KATEGORƒ∞ BAZINDA √ñZET:');
    Object.entries(categorySummary).forEach(([category, stats]) => {
      console.log(`${category}:`);
      console.log(`  - Toplam adet: ${stats.totalQuantity}`);
      console.log(`  - Toplam gelir: ${stats.totalRevenue}‚Ç∫`);
      console.log(`  - √úr√ºn √ße≈üidi: ${stats.products.size}`);
      console.log(`  - √úr√ºnler: ${Array.from(stats.products).join(', ')}`);
    });

  } catch (error) {
    console.error('‚ùå G√ºncelleme sƒ±rasƒ±nda hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Script'i √ßalƒ±≈ütƒ±r
restoreProductNames();
